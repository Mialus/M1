/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  STATIC = false;
  VISITOR = true;
  MULTI = true;
  VISITOR_EXCEPTION="JajaCodeException";
  TRACK_TOKENS =true;
}

PARSER_BEGIN(JajaCode)
package fr.univfcomte.comp4.analyseur_JajaCode;

public class JajaCode {

  public static void main(String args[]) throws ParseException {
  	JajaCode parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      parser = new JajaCode(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JajaCode(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java JajaCode < inputfile");
      System.out.println("OR");
      System.out.println("         java JajaCode inputfile");
      return;
    }
    try {
      	SimpleNode n = parser.classe();
		/*JajaCodeDefaultVisitor visitor = new JajaCodeDefaultVisitor();
		n.jjtAccept(visitor, null);*/
		n.dump("");
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

}

PARSER_END(JajaCode)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
//Tokens de la grammaire
 //Identificateurs


//Séparateurs
TOKEN : 
{
    < PAROUV: "(" >
|   < PARFER: ")" >
|   < ACCOUV: "{" >
|   < ACCFER: "}" >
|   < CROOUV: "[" >
|   < CROFER: "]" >
|   < PVIRG: ";" >
|   < VIRG: "," >
}



//Terminaux
TOKEN:
{
    <FALSE: "false">
|  	< IF: "if" >
|   <TRUE: "true">
|   <RETURN: "return">
}

//Operateurs
TOKEN : 
{
    < ADD: "add">
|   < SUB: "sub">
| 	< SUP: "sup">
|   < MUL: "mul">
|   < DIV: "div">
|   < SUPGA: ">">
|   < EGAL: "==">
|   < AND: "and">
|   < OU: "||">
|   < NOT: "!">
|   < AFFECT: "=">
|   < AFFECTPLUS: "+=">
|   < INCR: "++">
}

//Types
TOKEN :
{
    < INT: "int">
|   < BOOLEAN: "boolean">
|   < VOID: "void">
}

TOKEN :
{	< INIT: "init">
| 	< SWAP: "swap">
| 	< NEW: "new">
| 	< NEWARRAY: "newarray">
| 	< INVOKE: "invoke">
| 	< PUSH: "push">
| 	< POP: "pop">
| 	< LOAD: "load">
| 	< ALOAD: "aload">
| 	< STORE: "store">
| 	< ASTORE: "astore">
| 	< GOTO: "goto">
| 	< INC: "inc">
| 	< AINC: "ainc">
| 	< NOP: "nop">
| 	< JCSTOP: "jstop">
}

TOKEN : 
{

    < IDENT:  <LETTRE> (<LETTRE>|<NOMBRE>)* >    
|   < NOMBRE: (["0"-"9"])+> 
|   < LETTRE: (["a"-"z", "A"-"Z","_"])+>

}

// Regles 

SimpleNode classe() #classe(3):
{}
{
    <CLASS> ident() <ACCOUV> decls() methmain() <ACCFER> [<EOF>]{return jjtThis;}
}

void ident() #ident:
{Token t;}
{
    t=<IDENT> {jjtThis.value = t.image;}
}

void type() #JCType : {} {
	( <ENTIER> | <BOOLEEN> | <VOID> ) {jjtThis.value = t.image;} 
}

void sorte() #JCSorte : {} {
	( <VAR> | <METH> | <CST> ) {jjtThis.value = t.image;} 
}

void classe() #void:
{}{	adresse() Instrs () <PVIRG> classe()
|   <EOF>  

}  
void instrs() #void:
{}{    <INIT>
| 	<SWAP>
|	<NEW> <PAROUV> > ident() <VIRG> > type() <VIRG> sorte() <VIRG> adresse() <PARFER>
|	<NEWARRAY> <PAROUV> ident() <VIRG> type() <PARFER>
|	<INVOKE> <PAROUV> ident() <PARFER>
|	<RETURN>
| 	<PUSH> <PAROUV> valeur() <PARFER>
| 	<POP>
| 	<LOAD> <PAROUV> ident() <PARFER>
| 	<ALOAD> <PAROUV> ident() <PARFER>
| 	<STORE> <PAROUV> ident() <PARFER>
| 	<ASTORE> <PAROUV> ident() <PARFE>
| 	<IF> <PAROUV> adresse() <PARFER>
| 	<GOTO> <PAROUV> adresse() <PARFER>
| 	<INC> <PAROUV> ident() <PARFER>
| 	oper()
| 	<AINC> <PAROUV> Ident() <PARFER>
| 	<NOP>
| 	<JCSTOP>
}
void valeur() #void:
{}
{  	<NOMBRE>
| 	<TRUE>
| 	<FALSE>
| 	<EOF>
}   