package fr.univfcomte.comp4.tas;

import java.util.Arrays;

import fr.univfcomte.comp4.quadruplet.*;
import fr.univfcomte.comp4.table_hachage.*;

public class Tas {
	private static int TAILLE = 512;
	private int idTableId = 0;
	private int nbPuissance;
	private int nbBlocLibre;
	private int tailleMemoire;
	public Valeur [] memoire;
	private TableHachage tableId;
	private TableHachage tableBlocLibre;
	
	public Tas() throws Exception
	{
		this(TAILLE);
	}
	
	public Tas(int taille) throws Exception
	{
		if(taille<1)
		{
			throw new TasException("Erreur : La taille du tas doit être positive.");
		}
		nbPuissance = (int)Math.ceil(log2(taille));
		if(nbPuissance != log2(taille))
		{
			throw new TasException("Erreur : La taille du tas doit être une puissance de 2.");
		}
		nbBlocLibre = taille;
		memoire = new Valeur[taille];
		tableBlocLibre = new TableHachage(nbPuissance+1);
		tableId = new TableHachage(taille/2);
		String s = "";
		for(int i = 0; i<=nbPuissance; i++)
		{
			s=Integer.toString(i);
			tableBlocLibre.put(s, -1);		
		}
		tableBlocLibre.put(Integer.toString(nbPuissance), 0);
		
		this.tailleMemoire = taille;
	}
	
	private double log2(int a)
	{
		return (Math.log(a)/Math.log(2));
	}
	
	public ValeurTab creerTas(Valeur v, Sorte t, String nom) throws Exception
	{
	
		int nbElem = (int)(Integer)v.getVal();
		int indiceMemoire = 0;
		ValeurTab res = null;
		int dernierID = this.idTableId-1;
		int idDepart = 0;
		
		if(nbElem >nbBlocLibre)
		{
			throw new TasException("Erreur : Tableau trop grand, memoire insuffisante.");
		}
		
		if(nbElem < 1 )
		{
			throw new TasException("Erreur : La taille du tableau doit etre positive.");
		}
		
		indiceMemoire = this.getIndiceMemoire(nbElem);
		InfoTas tInfo = new InfoTas(indiceMemoire,nbElem);
		res = new ValeurTab(Integer.toString(this.idTableId));
		tableId.put(this.idTableId, tInfo);
		

		while(!this.tableId.contains(dernierID) && dernierID >= 0)
		{
			dernierID--;
		}
		
		if(dernierID >=0)
		{
			InfoTas infoT = (InfoTas)this.tableId.get(dernierID);
			idDepart = infoT.getIndice()+infoT.getTaille();
		}else
		{
			idDepart = 0;
		}
		indiceMemoire = idDepart;
		idDepart = deplacerTable(this.idTableId, idDepart);
		this.gererTableBlocsLibres(idDepart);
		this.idTableId++;	
		//Aloue la mémoire pour le tableau
		for(int i=indiceMemoire; i<indiceMemoire+nbElem; i++)
		{
			memoire[i] =t.createValeur();
			
		}
		return res;
	}
	
	//Découpe et réserve l'espace mémoire nécessaire pour le tableau, et retourne l'indice du premier élément du tableau.
	public int getIndiceMemoire(int nbElem) throws Exception
	{
		int indiceMemoire = -1; //indice du premier element du tableau qui sera alloué
		nbBlocLibre -= nbElem;
		int ind = 0;
		int espace = (int)Math.ceil(log2(nbElem));
		int puissance2 = espace;	//nbElem <= 2^puissance2
			
		//Recupère l'indice de premier espace disponible pouvant contenire nbElem elements
		ind =(Integer) tableBlocLibre.get(Integer.toString(puissance2));
		while(ind == -1 && (puissance2 < nbPuissance+1))
		{
			puissance2++;
			ind =(Integer) tableBlocLibre.get(Integer.toString(puissance2));
		}	
		
		if(puissance2 == nbPuissance+1)
		{
			throw new TasException("Erreur : Tableau trop grand, memoire insuffisante.");
		}
		indiceMemoire = ind;
		
		//Indice du dernier bloc non referencé de l'espace memoire utilisé
		int indiceDernierElem = indiceMemoire+(int)Math.pow(2, puissance2)-1;
		tableBlocLibre.remove(Integer.toString(puissance2));
		
		int nbBlocNonRef = (int)Math.pow(2, puissance2)-nbElem;
		while(nbBlocNonRef != 0)
		{
			puissance2--;
			if(Math.pow(2, puissance2) <= nbBlocNonRef)
			{
				indiceDernierElem -= (int)Math.pow(2, puissance2);
				tableBlocLibre.put(Integer.toString(puissance2), (indiceDernierElem+1));
				nbBlocNonRef -= (int)Math.pow(2, puissance2);
			}
		}
		
		return indiceMemoire;
	}
	
	public void retirerTas(ValeurTab t) throws Exception
	{
		int idElement = Integer.parseInt((String)t.getVal());
		InfoTas tInfo = (InfoTas) tableId.get(idElement);
		if(tInfo.getRef()>1)
		{
			tInfo.decrRef();
		}else
		{
		
			InfoTas infoT = (InfoTas)this.tableId.get(idElement);
			int idDepart = infoT.getIndice();
			tableId.remove(idElement);
			for(int i = idElement+1; i<this.idTableId; i++)
			{
				if(this.tableId.contains(i))
				{
					idDepart = this.deplacerTable(i, idDepart);
				}
			}
			
			int nbBlocNonRef = infoT.getTaille();
			int puissance2 = (int)Math.ceil(log2(nbBlocNonRef));
			while(nbBlocNonRef != 0)
			{
				if(Math.pow(2, puissance2) <= nbBlocNonRef)
				{
					tableBlocLibre.put(Integer.toString(puissance2), 0);
					nbBlocNonRef -= (int)Math.pow(2, puissance2);
				}
				puissance2--;
			}
			
			this.nbBlocLibre+=infoT.getTaille();
			this.gererTableBlocsLibres(idDepart);
		}
	}
	
	public void ajouterRef(ValeurTab t) throws TableHachageException
	{
		int idElement = Integer.parseInt((String)t.getVal());
		InfoTas tInfo = (InfoTas) tableId.get(idElement);
		tInfo.incrRef();
	}
	
	public Valeur valeurTas(ValeurTab t, int indice)  throws Exception
	{
		InfoTas tInfo=null;
		int idElement = Integer.parseInt((String)t.getVal());
		tInfo = (InfoTas) tableId.get(idElement);	
		if(indice >= tInfo.getTaille())
		{
			throw new TasException("Erreur : Indice en dehors du tableau.");
		}
			
		int indiceDepart = tInfo.getIndice();
		return memoire[indiceDepart+indice];
		
	}
	
	public void affecterTas(Valeur v, int indice, ValeurTab t) throws Exception
	{
		
		int idElement = Integer.parseInt((String)t.getVal());
		InfoTas tInfo = null;

		tInfo = (InfoTas) tableId.get(idElement);
		
		if(indice >= tInfo.getTaille())
		{
			throw new TasException("Erreur : Indice en dehors du tableau.");
		}
		
		if(indice < 0)
		{
			throw new TasException("Erreur : Indice en dehors du tableau.");
		}
	
		int indiceDepart = tInfo.getIndice();
		memoire[indiceDepart+indice] = v;
	}
	
	public void afficherTableau(String nom, ValeurTab t) throws Exception
	{

		String s = nom+" -> [";
		int idElement = Integer.parseInt((String)t.getVal());
		InfoTas tInfo = (InfoTas) tableId.get(idElement);
		
		int indice = tInfo.getIndice();
		int taille = tInfo.getTaille();
		for(int i = indice; i<indice+taille-1; i++)
		{
			s+=memoire[i].toString()+", ";
		}
		s+=memoire[indice+taille-1].toString()+"]";
		
	}
	
	public InfoTas getTabInfo(ValeurTab t) throws Exception
	{
		InfoTas res = null;
		int idElement = Integer.parseInt((String)t.getVal());
		res = (InfoTas) tableId.get(idElement);
		
		return res;
	}

	public int deplacerTable(int idTable, int idDepart) throws Exception
	{
		int res = idDepart;

		InfoTas infoT =(InfoTas) this.tableId.get(idTable);
		int idT = infoT.getIndice();
		if(idT > idDepart)
		{
			for(int i =0; i< infoT.getTaille(); i++)
			{
				memoire[idDepart+i] = memoire[idT+i];
			}
			
			infoT.setIndice(idDepart);
		}
		
		res += infoT.getTaille();
		
		return res;
	}
	
	public void gererTableBlocsLibres(int idDepart) throws Exception
	{
		for(int i = 0; i<this.tableBlocLibre.size(); i++)
		{
			idDepart = this.organiserBlocsLibre(i, idDepart);
		}
	}
	
	public int organiserBlocsLibre(int idBloc, int idDepart) throws Exception
	{
		int compteurBloc = 0;
		int nbBlocAAjouter = 0;
		int idPremierBloc = 0;
		
		idPremierBloc =(Integer) this.tableBlocLibre.get(Integer.toString(idBloc));
		
		while(idPremierBloc != -1)
		{
			compteurBloc++;
			this.tableBlocLibre.remove(Integer.toString(idBloc));
			idPremierBloc =(Integer) this.tableBlocLibre.get(Integer.toString(idBloc));
		};
		
		
		nbBlocAAjouter = compteurBloc/2;
		for(int i = 0 ; i<nbBlocAAjouter; i++)
		{
			this.tableBlocLibre.put(Integer.toString(idBloc+1), 0);
		}
		
		if(compteurBloc%2 == 1)
		{
			this.tableBlocLibre.put(Integer.toString(idBloc), idDepart);
			idDepart += Math.pow(2, idBloc);
		}
		
		return idDepart;
	}
	
	public boolean contain(ValeurTab t)
	{
		return tableId.contains(t.getVal());
	}
	
	public String getTableauToString(Quad q) throws Exception
	{
		String s = "";
		String nomTab =q.getId();
		int idElement = Integer.parseInt((String)(q.getVal()).getVal());

		s = nomTab+" -> [";
		InfoTas tInfo = (InfoTas) tableId.get(idElement);
		
		int indice = tInfo.getIndice();
		int taille = tInfo.getTaille();
		
		for(int i = indice; i<indice+taille-1; i++)
		{
			s+=memoire[i].toString()+", ";
		}
		
		s+=memoire[indice+taille-1].toString()+"]";

		return (s);
	}
	
	public boolean equals(Object o)
	{
		if(o instanceof Tas && o!= null)
		{
			Tas t = (Tas)o;
			Boolean v1 = this.nbBlocLibre == t.nbBlocLibre && this.nbPuissance == t.nbPuissance && this.idTableId == t.idTableId && this.tailleMemoire == t.tailleMemoire;
			if(!v1)
			{
				return false;
			}
			
			if(!this.tableId.equals(t.tableId))
			{
				return false;
			}
			
			try
			{
				
				for(int i=0; i<this.idTableId; i++)
				{
					if(this.tableId.contains(i))
					{
						InfoTas infoT = (InfoTas) this.tableId.get(i);
						int id = infoT.getIndice();
						int n = infoT.getTaille();
						
						for(int j = id ; j<id+n; j++)
						{
							if(!this.memoire[j].equals(t.memoire[j]))
							{
								return false;
							}
						}
					}
				}
			}catch(Exception e)
			{
				return false;
			}
			
			return this.tableBlocLibre.equals(t.tableBlocLibre);
		}else
		{
			return false;
		}
	}
	
	public String toString()
	{
		return "table ID : "+tableId.toString()+"\n\ntableBlockLibre : "+this.tableBlocLibre.toString() + "\n\n";
	}
}
