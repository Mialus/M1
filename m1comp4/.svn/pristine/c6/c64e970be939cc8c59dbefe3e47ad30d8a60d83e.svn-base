/* Generated By:JJTree&JavaCC: Do not edit this line. JajaCodeConstants.java */
package fr.univfcomte.comp4.analyseur_JajaCode;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JajaCodeConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PAROUV = 7;
  /** RegularExpression Id. */
  int PARFER = 8;
  /** RegularExpression Id. */
  int ACCOUV = 9;
  /** RegularExpression Id. */
  int ACCFER = 10;
  /** RegularExpression Id. */
  int CROOUV = 11;
  /** RegularExpression Id. */
  int CROFER = 12;
  /** RegularExpression Id. */
  int PVIRG = 13;
  /** RegularExpression Id. */
  int VIRG = 14;
  /** RegularExpression Id. */
  int ADD = 15;
  /** RegularExpression Id. */
  int SUB = 16;
  /** RegularExpression Id. */
  int SUP = 17;
  /** RegularExpression Id. */
  int MUL = 18;
  /** RegularExpression Id. */
  int DIV = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int NEG = 23;
  /** RegularExpression Id. */
  int CMP = 24;
  /** RegularExpression Id. */
  int ENTIER = 25;
  /** RegularExpression Id. */
  int BOOLEEN = 26;
  /** RegularExpression Id. */
  int VIDE = 27;
  /** RegularExpression Id. */
  int METH = 28;
  /** RegularExpression Id. */
  int CST = 29;
  /** RegularExpression Id. */
  int VAR = 30;
  /** RegularExpression Id. */
  int FALSE = 31;
  /** RegularExpression Id. */
  int OMEGA = 32;
  /** RegularExpression Id. */
  int IF = 33;
  /** RegularExpression Id. */
  int TRUE = 34;
  /** RegularExpression Id. */
  int RETURN = 35;
  /** RegularExpression Id. */
  int INIT = 36;
  /** RegularExpression Id. */
  int SWAP = 37;
  /** RegularExpression Id. */
  int NEW = 38;
  /** RegularExpression Id. */
  int NEWARRAY = 39;
  /** RegularExpression Id. */
  int INVOKE = 40;
  /** RegularExpression Id. */
  int PUSH = 41;
  /** RegularExpression Id. */
  int POP = 42;
  /** RegularExpression Id. */
  int LOAD = 43;
  /** RegularExpression Id. */
  int ALOAD = 44;
  /** RegularExpression Id. */
  int STORE = 45;
  /** RegularExpression Id. */
  int ASTORE = 46;
  /** RegularExpression Id. */
  int GOTO = 47;
  /** RegularExpression Id. */
  int INC = 48;
  /** RegularExpression Id. */
  int AINC = 49;
  /** RegularExpression Id. */
  int NOP = 50;
  /** RegularExpression Id. */
  int JCSTOP = 51;
  /** RegularExpression Id. */
  int IDENT = 52;
  /** RegularExpression Id. */
  int NOMBRE = 53;
  /** RegularExpression Id. */
  int LETTRE = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"add\"",
    "\"sub\"",
    "\"sup\"",
    "\"mul\"",
    "\"div\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"neg\"",
    "\"cmp\"",
    "\"entier\"",
    "\"booleen\"",
    "\"vide\"",
    "\"meth\"",
    "\"cst\"",
    "\"var\"",
    "\"jcfaux\"",
    "\"w\"",
    "\"if\"",
    "\"jcvrai\"",
    "\"return\"",
    "\"init\"",
    "\"swap\"",
    "\"new\"",
    "\"newarray\"",
    "\"invoke\"",
    "\"push\"",
    "\"pop\"",
    "\"load\"",
    "\"aload\"",
    "\"store\"",
    "\"astore\"",
    "\"goto\"",
    "\"inc\"",
    "\"ainc\"",
    "\"nop\"",
    "\"jcstop\"",
    "<IDENT>",
    "<NOMBRE>",
    "<LETTRE>",
  };

}
