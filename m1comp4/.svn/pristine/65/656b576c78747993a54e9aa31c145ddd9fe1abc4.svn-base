/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JajaCode.jj */
/*@egen*//*
 * Copyright \u00c2\u00a9 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  STATIC = false;
                 
               
                                        
                     
}

PARSER_BEGIN(JajaCode)
package fr.univfcomte.comp4.analyseur_JajaCode;

public class JajaCode/*@bgen(jjtree)*/implements JajaCodeTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJajaCodeState jjtree = new JJTJajaCodeState();

/*@egen*/

  public static void main(String args[]) throws ParseException {
  	JajaCode parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      parser = new JajaCode(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JajaCode(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java JajaCode < inputfile");
      System.out.println("OR");
      System.out.println("         java JajaCode inputfile");
      return;
    }
    try {
      	SimpleNode n = parser.classe();
		/*JajaCodeDefaultVisitor visitor = new JajaCodeDefaultVisitor();
		n.jjtAccept(visitor, null);*/
		n.dump("");
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

}

PARSER_END(JajaCode)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
//Tokens de la grammaire
 //Identificateurs


//S\u00c3\u00a9parateurs
TOKEN : 
{
    < PAROUV: "(" >
|   < PARFER: ")" >
|   < ACCOUV: "{" >
|   < ACCFER: "}" >
|   < CROOUV: "[" >
|   < CROFER: "]" >
|   < PVIRG: ";" >
|   < VIRG: "," >
}



//Operateurs
TOKEN : 
{
    < ADD: "add">
|   < SUB: "sub">
| 	< SUP: "sup">
|   < MUL: "mul">
|   < DIV: "div">
|   < AND: "and">
|   < OR: "or">
|   < NOT: "not">
| 	< NEG: "neg">
| 	< CMP: "cmp" >
}

//Types
TOKEN :
{
    < ENTIER: "entier">
|   < BOOLEEN: "booleen">
|   < VIDE: "vide">
|   < METH: "meth" >
|	< CST: "cst" >
| 	< VAR: "var" >
}

//Terminaux
TOKEN:
{
    < FALSE: "jcfaux">
|  	< IF: "if" >
|   < TRUE: "jcvrai">
|   < RETURN: "return">| 	< INIT: "init">
| 	< SWAP: "swap">
| 	< NEW: "new">
| 	< NEWARRAY: "newarray">
| 	< INVOKE: "invoke">
| 	< PUSH: "push">
| 	< POP: "pop">
| 	< LOAD: "load">
| 	< ALOAD: "aload">
| 	< STORE: "store">
| 	< ASTORE: "astore">
| 	< GOTO: "goto">
| 	< INC: "inc">
| 	< AINC: "ainc">
| 	< NOP: "nop">
| 	< JCSTOP: "jcstop">
}

TOKEN : 
{

    < IDENT:  <LETTRE> (<LETTRE>|<NOMBRE>)* >    
|   < NOMBRE: (["0"-"9"])+> 
|   < LETTRE: (["a"-"z", "A"-"Z","_"])+>

}

// Regles
SimpleNode classe()              :
{/*@bgen(jjtree) #JajaCode( 3) */
  ASTJajaCode jjtn000 = new ASTJajaCode(JJTJAJACODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #JajaCode( 3) */
    try {
/*@egen*/
    adresse() instrs() < PVIRG > (classe() |/*@bgen(jjtree) jcnil */
                                            {
                                              ASTjcnil jjtn001 = new ASTjcnil(JJTJCNIL);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                              jjtn001.jjtSetFirstToken(getToken(1));
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn001, true);
                                              jjtc001 = false;
                                              jjtn001.jjtSetLastToken(getToken(0));
                                            }
/*@egen*/{}/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001, true);
                                                jjtn001.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/        ) [<EOF >]/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000,  3);
                                                                  jjtc000 = false;
                                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void ident()        :
{/*@bgen(jjtree) idents */
 ASTidents jjtn000 = new ASTidents(JJTIDENTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) idents */
    try {
/*@egen*/
    t=<IDENT>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
              }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void type()      : {/*@bgen(jjtree) type */
                    ASTtype jjtn000 = new ASTtype(JJTTYPE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;} {/*@bgen(jjtree) type */
        try {
/*@egen*/
	( t=<ENTIER>| t=<BOOLEEN>| t=<VIDE>)/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 
}

void sorte()       : {/*@bgen(jjtree) sorte */
                      ASTsorte jjtn000 = new ASTsorte(JJTSORTE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;} {/*@bgen(jjtree) sorte */
        try {
/*@egen*/
	( t=<VAR> | t=<METH> | t=<CST> )/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 
}

void adresse()         :
{/*@bgen(jjtree) adresse */
 ASTadresse jjtn000 = new ASTadresse(JJTADRESSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) adresse */
    try {
/*@egen*/
    t=<NOMBRE>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
  
void instrs()      :
{}{/*@bgen(jjtree) init */
    {
      ASTinit jjtn001 = new ASTinit(JJTINIT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/    <INIT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/	     
|/*@bgen(jjtree) swap */
        {
          ASTswap jjtn002 = new ASTswap(JJTSWAP);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<SWAP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/	     
|	<NEW> <PAROUV> ident() <VIRG> type() <VIRG> sorte() <VIRG> adresse()/*@bgen(jjtree) #nouv( 4) */
                                                                             {
                                                                               ASTnouv jjtn003 = new ASTnouv(JJTNOUV);
                                                                               boolean jjtc003 = true;
                                                                               jjtree.openNodeScope(jjtn003);
                                                                               jjtn003.jjtSetFirstToken(getToken(1));
                                                                             }
                                                                             try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                                                             } finally {
                                                                               if (jjtc003) {
                                                                                 jjtree.closeNodeScope(jjtn003,  4);
                                                                                 jjtn003.jjtSetLastToken(getToken(0));
                                                                               }
                                                                             }
/*@egen*/         
|	<NEWARRAY> <PAROUV> ident() <VIRG> type()/*@bgen(jjtree) #newarray( 2) */
                                                  {
                                                    ASTnewarray jjtn004 = new ASTnewarray(JJTNEWARRAY);
                                                    boolean jjtc004 = true;
                                                    jjtree.openNodeScope(jjtn004);
                                                    jjtn004.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc004) {
                                                      jjtree.closeNodeScope(jjtn004,  2);
                                                      jjtn004.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/             
|	<INVOKE> <PAROUV> ident()/*@bgen(jjtree) #invoke( 1) */
                                  {
                                    ASTinvoke jjtn005 = new ASTinvoke(JJTINVOKE);
                                    boolean jjtc005 = true;
                                    jjtree.openNodeScope(jjtn005);
                                    jjtn005.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc005) {
                                      jjtree.closeNodeScope(jjtn005,  1);
                                      jjtn005.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/           
|/*@bgen(jjtree) retour */
        {
          ASTretour jjtn006 = new ASTretour(JJTRETOUR);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtn006.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/	<RETURN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtn006.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/        
| 	<PUSH> <PAROUV> valeur()/*@bgen(jjtree) #push( 1) */
                                 {
                                   ASTpush jjtn007 = new ASTpush(JJTPUSH);
                                   boolean jjtc007 = true;
                                   jjtree.openNodeScope(jjtn007);
                                   jjtn007.jjtSetFirstToken(getToken(1));
                                 }
                                 try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc007) {
                                     jjtree.closeNodeScope(jjtn007,  1);
                                     jjtn007.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/         
|/*@bgen(jjtree) pop */
        {
          ASTpop jjtn008 = new ASTpop(JJTPOP);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtn008.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<POP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
            jjtn008.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
| 	<LOAD> <PAROUV> ident()/*@bgen(jjtree) #load( 1) */
                                {
                                  ASTload jjtn009 = new ASTload(JJTLOAD);
                                  boolean jjtc009 = true;
                                  jjtree.openNodeScope(jjtn009);
                                  jjtn009.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc009) {
                                    jjtree.closeNodeScope(jjtn009,  1);
                                    jjtn009.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/         
| 	<ALOAD> <PAROUV> ident()/*@bgen(jjtree) #aload( 1) */
                                 {
                                   ASTaload jjtn010 = new ASTaload(JJTALOAD);
                                   boolean jjtc010 = true;
                                   jjtree.openNodeScope(jjtn010);
                                   jjtn010.jjtSetFirstToken(getToken(1));
                                 }
                                 try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc010) {
                                     jjtree.closeNodeScope(jjtn010,  1);
                                     jjtn010.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/          
| 	<STORE> <PAROUV> ident()/*@bgen(jjtree) #store( 1) */
                                 {
                                   ASTstore jjtn011 = new ASTstore(JJTSTORE);
                                   boolean jjtc011 = true;
                                   jjtree.openNodeScope(jjtn011);
                                   jjtn011.jjtSetFirstToken(getToken(1));
                                 }
                                 try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc011) {
                                     jjtree.closeNodeScope(jjtn011,  1);
                                     jjtn011.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/          
| 	<ASTORE> <PAROUV> ident()/*@bgen(jjtree) #astore( 1) */
                                  {
                                    ASTastore jjtn012 = new ASTastore(JJTASTORE);
                                    boolean jjtc012 = true;
                                    jjtree.openNodeScope(jjtn012);
                                    jjtn012.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc012) {
                                      jjtree.closeNodeScope(jjtn012,  1);
                                      jjtn012.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/           
| 	<IF> <PAROUV> adresse()/*@bgen(jjtree) #si( 1) */
                                {
                                  ASTsi jjtn013 = new ASTsi(JJTSI);
                                  boolean jjtc013 = true;
                                  jjtree.openNodeScope(jjtn013);
                                  jjtn013.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc013) {
                                    jjtree.closeNodeScope(jjtn013,  1);
                                    jjtn013.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/       
| 	<GOTO> <PAROUV> adresse()/*@bgen(jjtree) #allerA( 1) */
                                  {
                                    ASTallerA jjtn014 = new ASTallerA(JJTALLERA);
                                    boolean jjtc014 = true;
                                    jjtree.openNodeScope(jjtn014);
                                    jjtn014.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc014) {
                                      jjtree.closeNodeScope(jjtn014,  1);
                                      jjtn014.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/           
| 	<INC> <PAROUV> ident()/*@bgen(jjtree) #inc( 1) */
                               {
                                 ASTinc jjtn015 = new ASTinc(JJTINC);
                                 boolean jjtc015 = true;
                                 jjtree.openNodeScope(jjtn015);
                                 jjtn015.jjtSetFirstToken(getToken(1));
                               }
                               try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc015) {
                                   jjtree.closeNodeScope(jjtn015,  1);
                                   jjtn015.jjtSetLastToken(getToken(0));
                                 }
                               }
/*@egen*/        
| 	oper()
| 	<AINC> <PAROUV> ident()/*@bgen(jjtree) #ainc( 1) */
                                {
                                  ASTainc jjtn016 = new ASTainc(JJTAINC);
                                  boolean jjtc016 = true;
                                  jjtree.openNodeScope(jjtn016);
                                  jjtn016.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc016) {
                                    jjtree.closeNodeScope(jjtn016,  1);
                                    jjtn016.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/         
|/*@bgen(jjtree) nop */
        {
          ASTnop jjtn017 = new ASTnop(JJTNOP);
          boolean jjtc017 = true;
          jjtree.openNodeScope(jjtn017);
          jjtn017.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<NOP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc017) {
            jjtree.closeNodeScope(jjtn017, true);
            jjtn017.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) jcstop */
        {
          ASTjcstop jjtn018 = new ASTjcstop(JJTJCSTOP);
          boolean jjtc018 = true;
          jjtree.openNodeScope(jjtn018);
          jjtn018.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<JCSTOP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc018) {
            jjtree.closeNodeScope(jjtn018, true);
            jjtn018.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/        
}

void valeur()      :
{}
{
    nbre()
|/*@bgen(jjtree) vrai */
        {
          ASTvrai jjtn001 = new ASTvrai(JJTVRAI);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<TRUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/      
|/*@bgen(jjtree) faux */
        {
          ASTfaux jjtn002 = new ASTfaux(JJTFAUX);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<FALSE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/      
}
void oper()      :
{}
{
	oper2()
| 	oper1()
}
void oper1()      :
{}
{/*@bgen(jjtree) neg */
        {
          ASTneg jjtn001 = new ASTneg(JJTNEG);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	<NEG>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) not */
        {
          ASTnot jjtn002 = new ASTnot(JJTNOT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<NOT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
}

void oper2()      :
{}
{/*@bgen(jjtree) add */
        {
          ASTadd jjtn001 = new ASTadd(JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	<ADD>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) sub */
        {
          ASTsub jjtn002 = new ASTsub(JJTSUB);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<SUB>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) mul */
        {
          ASTmul jjtn003 = new ASTmul(JJTMUL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<MUL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) div */
        {
          ASTdiv jjtn004 = new ASTdiv(JJTDIV);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          jjtn004.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<DIV>/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
            jjtn004.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) cmp */
        {
          ASTcmp jjtn005 = new ASTcmp(JJTCMP);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          jjtn005.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<CMP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
            jjtn005.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) sup */
        {
          ASTsup jjtn006 = new ASTsup(JJTSUP);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtn006.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<SUP>/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtn006.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
|/*@bgen(jjtree) or */
        {
          ASTor jjtn007 = new ASTor(JJTOR);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtn007.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<OR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtn007.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/    
|/*@bgen(jjtree) and */
        {
          ASTand jjtn008 = new ASTand(JJTAND);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtn008.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ 	<AND>/*@bgen(jjtree)*/
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
            jjtn008.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
}

void nbre()      :
{/*@bgen(jjtree) nbre */
 ASTnbre jjtn000 = new ASTnbre(JJTNBRE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) nbre */
    try {
/*@egen*/
    t=<NOMBRE>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}   