/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJaja.java */
package fr.univfcomte.comp4.analyseur;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants, MiniJajaConstants {/*@bgen(jjtree)*/
  protected JJTMiniJajaState jjtree = new JJTMiniJajaState();
  public static void main(String args[]) throws ParseException {
        MiniJaja parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      //parser = new MiniJaja(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new MiniJaja(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java MiniJaja < inputfile");
      System.out.println("OR");
      System.out.println("         java MiniJaja inputfile");
      return;
    }
    try {
    	SimpleNode n, n1, n2;
    	String str = "class Exemple { int t[5]; void f(int a){}; main{c = b+5;t[4]=4;} }"; 
    	 
    	parser = new MiniJaja(str); 
    	 
    	n = parser.classe();
        System.out.println(n.dump(""));
        
        str ="a+b";
    	parser = new MiniJaja(str);
        n1 = new ASTvnil(JJTVNIL);
        System.out.println(n1.dump(""));
        
        str = "boolean";
        parser = new MiniJaja(str);
        n2 = parser.type();
        System.out.println(n2.dump(""));
        
        /*ASTvars jjtn001 = new ASTvars(JJTVARS);
        ASTvars jjtn002 = new ASTvars(JJTVARS);
        jjtn001.jjtAddChild(n, 0);
        jjtn001.jjtAddChild(jjtn002, 1);
        jjtn002.jjtAddChild(n1, 0);
        jjtn002.jjtAddChild(new ASTvnil(JJTVNIL), 1);
        System.out.println(jjtn001.dump(""));*/
                /*MiniJajaDefaultVisitor visitor = new MiniJajaDefaultVisitor();
		n.jjtAccept(visitor, null);*/
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

// Regles 
  final public SimpleNode classe() throws ParseException {
 /*@bgen(jjtree) #classe( 3) */
  ASTclasse jjtn000 = new ASTclasse(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CLASS);
      ident();
      jj_consume_token(ACCOUV);
      decls();
      methmain();
      jj_consume_token(ACCFER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
                                                                  jjtree.closeNodeScope(jjtn000,  3);
                                                                  jjtc000 = false;
                                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode ident() throws ParseException {
 /*@bgen(jjtree) ident */
 ASTident jjtn000 = new ASTident(JJTIDENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENT);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
               jjtn000.value = t.image; {if (true) return jjtn000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode decls() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case INT:
    case BOOLEAN:
    case VOID:
      decl();
      jj_consume_token(PVIRG);
                     ASTdecls jjtn001 = new ASTdecls(JJTDECLS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
      try {
        decls();
      } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                       return jjtn001;
                     }
      }
      break;
    default:
      jj_la1[1] = jj_gen;
          ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
      try {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtn002.jjtSetLastToken(getToken(0));

      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
            return jjtn002;
          }
      }
    }
    return null;
    
  }

  final public SimpleNode decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case VOID:
      typemeth();
      ident();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAROUV:
        jj_consume_token(PAROUV);
        entetes();
        jj_consume_token(PARFER);
        jj_consume_token(ACCOUV);
        vars();
        instrs();
                                                                                   ASTmethode jjtn001 = new ASTmethode(JJTMETHODE);
                                                                                   boolean jjtc001 = true;
                                                                                   jjtree.openNodeScope(jjtn001);
                                                                                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(ACCFER);
        } finally {
                                                                                   if (jjtc001) {
                                                                                     jjtree.closeNodeScope(jjtn001,  5);
                                                                                     jjtn001.jjtSetLastToken(getToken(0));
                                                                                     return jjtn001;
                                                                                   }
        }
        break;
      case CROOUV:
        jj_consume_token(CROOUV);
        exp();
                                                                                                                         ASTtableau jjtn002 = new ASTtableau(JJTTABLEAU);
                                                                                                                         boolean jjtc002 = true;
                                                                                                                         jjtree.openNodeScope(jjtn002);
                                                                                                                         jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(CROFER);
        } finally {
                                                                                                                         if (jjtc002) {
                                                                                                                           jjtree.closeNodeScope(jjtn002,  3);
                                                                                                                           jjtn002.jjtSetLastToken(getToken(0));
                                                                                                                           return jjtn002;
                                                                                                                         }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
                                                                                                                                                ASTvar jjtn003 = new ASTvar(JJTVAR);
                                                                                                                                                boolean jjtc003 = true;
                                                                                                                                                jjtree.openNodeScope(jjtn003);
                                                                                                                                                jjtn003.jjtSetFirstToken(getToken(1));
        try {
          vexp();
        } catch (Throwable jjte003) {
                                                                                                                                                if (jjtc003) {
                                                                                                                                                  jjtree.clearNodeScope(jjtn003);
                                                                                                                                                  jjtc003 = false;
                                                                                                                                                } else {
                                                                                                                                                  jjtree.popNode();
                                                                                                                                                }
                                                                                                                                                if (jjte003 instanceof RuntimeException) {
                                                                                                                                                  {if (true) throw (RuntimeException)jjte003;}
                                                                                                                                                }
                                                                                                                                                if (jjte003 instanceof ParseException) {
                                                                                                                                                  {if (true) throw (ParseException)jjte003;}
                                                                                                                                                }
                                                                                                                                                {if (true) throw (Error)jjte003;}
        } finally {
                                                                                                                                                if (jjtc003) {
                                                                                                                                                  jjtree.closeNodeScope(jjtn003,  3);
                                                                                                                                                  jjtn003.jjtSetLastToken(getToken(0));
                                                                                                                                                  return jjtn003;
                                                                                                                                                }
        }
      }
      break;
    case FINAL:
      jj_consume_token(FINAL);
      type();
      ident();
                                 ASTcst jjtn004 = new ASTcst(JJTCST);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                                 jjtn004.jjtSetFirstToken(getToken(1));
      try {
        vexp();
      } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte004;}
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte004;}
                                 }
                                 {if (true) throw (Error)jjte004;}
      } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  3);
                                   jjtn004.jjtSetLastToken(getToken(0));
                                   return jjtn004;
                                 }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
	return null;
  }

  final public SimpleNode vars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case INT:
    case BOOLEAN:
    case VOID:
      var();
      jj_consume_token(PVIRG);
                    ASTvars jjtn001 = new ASTvars(JJTVARS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        vars();
      } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtn001.jjtSetLastToken(getToken(0));
                      return jjtn001;
                    }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
          ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
      try {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtn002.jjtSetLastToken(getToken(0));

      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
            return jjtn002;
          }
      }
    }
    return null;
  }

  final public SimpleNode var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case VOID:
      typemeth();
      ident();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROOUV:
        jj_consume_token(CROOUV);
        exp();
                                              ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                              jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(CROFER);
        } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  3);
                                                jjtn001.jjtSetLastToken(getToken(0));
                                                return jjtn001;
                                              }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
                                                                     ASTvar jjtn002 = new ASTvar(JJTVAR);
                                                                     boolean jjtc002 = true;
                                                                     jjtree.openNodeScope(jjtn002);
                                                                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          vexp();
        } catch (Throwable jjte002) {
                                                                     if (jjtc002) {
                                                                       jjtree.clearNodeScope(jjtn002);
                                                                       jjtc002 = false;
                                                                     } else {
                                                                       jjtree.popNode();
                                                                     }
                                                                     if (jjte002 instanceof RuntimeException) {
                                                                       {if (true) throw (RuntimeException)jjte002;}
                                                                     }
                                                                     if (jjte002 instanceof ParseException) {
                                                                       {if (true) throw (ParseException)jjte002;}
                                                                     }
                                                                     {if (true) throw (Error)jjte002;}
        } finally {
                                                                     if (jjtc002) {
                                                                       jjtree.closeNodeScope(jjtn002,  3);
                                                                       jjtn002.jjtSetLastToken(getToken(0));
                                                                       return jjtn002;
                                                                     }
        }
      }
      break;
    case FINAL:
      jj_consume_token(FINAL);
      type();
      ident();
                                 ASTcst jjtn003 = new ASTcst(JJTCST);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                                 jjtn003.jjtSetFirstToken(getToken(1));
      try {
        vexp();
      } catch (Throwable jjte003) {
                                 if (jjtc003) {
                                   jjtree.clearNodeScope(jjtn003);
                                   jjtc003 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte003 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte003;}
                                 }
                                 if (jjte003 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte003;}
                                 }
                                 {if (true) throw (Error)jjte003;}
      } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  3);
                                   jjtn003.jjtSetLastToken(getToken(0));
                                   return jjtn003;
                                 }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
	return null;
  }

  final public void vexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFFECT:
      jj_consume_token(AFFECT);
      exp();
      break;
    default:
      jj_la1[7] = jj_gen;
          ASTomega jjtn001 = new ASTomega(JJTOMEGA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.jjtSetLastToken(getToken(0));

      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
    }
  }

  final public SimpleNode methmain() throws ParseException {
 /*@bgen(jjtree) #main( 2) */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(MAIN);
      jj_consume_token(ACCOUV);
      vars();
      instrs();
      jj_consume_token(ACCFER);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
        jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return jjtn000;}
      }
    }
	return jjtn000;
  }

  final public SimpleNode entetes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
      entete();
               ASTentetes jjtn002 = new ASTentetes(JJTENTETES);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          jj_consume_token(VIRG);
          entetes();
          break;
        default:
          jj_la1[8] = jj_gen;
                                    ASTenil jjtn001 = new ASTenil(JJTENIL);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtn001.jjtSetFirstToken(getToken(1));
          try {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                    jjtn001.jjtSetLastToken(getToken(0));

          } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                      jjtn001.jjtSetLastToken(getToken(0));
                                      return jjtn001;
                                    }
          }
        }
      } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
      } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtn002.jjtSetLastToken(getToken(0));
                 return jjtn002;
               }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
          ASTenil jjtn003 = new ASTenil(JJTENIL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
      try {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtn003.jjtSetLastToken(getToken(0));

      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
            return jjtn003;
          }
      }
    }
	return null;
  }

  final public SimpleNode entete() throws ParseException {
    type();
             ASTentete jjtn001 = new ASTentete(JJTENTETE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
    try {
      ident();
    } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
    } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtn001.jjtSetLastToken(getToken(0));
               return jjtn001;
             }
    }
	return jjtn001;
  }

  final public SimpleNode instrs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case RETURN:
    case WHILE:
    case IDENT:
      instr();
      jj_consume_token(PVIRG);
                      ASTinstrs jjtn001 = new ASTinstrs(JJTINSTRS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        instrs();
      } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                        jjtn001.jjtSetLastToken(getToken(0));
                        return jjtn001;
                      }
      }
      break;
    default:
      jj_la1[10] = jj_gen;
          ASTinil jjtn002 = new ASTinil(JJTINIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
      try {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtn002.jjtSetLastToken(getToken(0));

      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
            return jjtn002;
          }
      }
    }
    return null;
  }

  final public SimpleNode instr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      ident();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROOUV:
      case AFFECT:
      case AFFECTPLUS:
      case INCR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CROOUV:
          jj_consume_token(CROOUV);
          exp();
                                ASTtab jjtn001 = new ASTtab(JJTTAB);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtn001.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(CROFER);
          } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtn001.jjtSetLastToken(getToken(0));
                                  //return jjtn001;
                                }
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AFFECT:
          jj_consume_token(AFFECT);
                                                            ASTaffectation jjtn002 = new ASTaffectation(JJTAFFECTATION);
                                                            boolean jjtc002 = true;
                                                            jjtree.openNodeScope(jjtn002);
                                                            jjtn002.jjtSetFirstToken(getToken(1));
          try {
            exp();
          } catch (Throwable jjte002) {
                                                            if (jjtc002) {
                                                              jjtree.clearNodeScope(jjtn002);
                                                              jjtc002 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte002 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte002;}
                                                            }
                                                            if (jjte002 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte002;}
                                                            }
                                                            {if (true) throw (Error)jjte002;}
          } finally {
                                                            if (jjtc002) {
                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                              jjtn002.jjtSetLastToken(getToken(0));
                                                              return jjtn002;
                                                            }
          }
          break;
        case AFFECTPLUS:
          jj_consume_token(AFFECTPLUS);
                                                                                                 ASTsomme jjtn003 = new ASTsomme(JJTSOMME);
                                                                                                 boolean jjtc003 = true;
                                                                                                 jjtree.openNodeScope(jjtn003);
                                                                                                 jjtn003.jjtSetFirstToken(getToken(1));
          try {
            exp();
          } catch (Throwable jjte003) {
                                                                                                 if (jjtc003) {
                                                                                                   jjtree.clearNodeScope(jjtn003);
                                                                                                   jjtc003 = false;
                                                                                                 } else {
                                                                                                   jjtree.popNode();
                                                                                                 }
                                                                                                 if (jjte003 instanceof RuntimeException) {
                                                                                                   {if (true) throw (RuntimeException)jjte003;}
                                                                                                 }
                                                                                                 if (jjte003 instanceof ParseException) {
                                                                                                   {if (true) throw (ParseException)jjte003;}
                                                                                                 }
                                                                                                 {if (true) throw (Error)jjte003;}
          } finally {
                                                                                                 if (jjtc003) {
                                                                                                   jjtree.closeNodeScope(jjtn003,  2);
                                                                                                   jjtn003.jjtSetLastToken(getToken(0));
                                                                                                   return jjtn003;
                                                                                                 }
          }
          break;
        case INCR:
                                                                                                                  ASTincrement jjtn004 = new ASTincrement(JJTINCREMENT);
                                                                                                                  boolean jjtc004 = true;
                                                                                                                  jjtree.openNodeScope(jjtn004);
                                                                                                                  jjtn004.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(INCR);
          } finally {
                                                                                                                  if (jjtc004) {
                                                                                                                    jjtree.closeNodeScope(jjtn004,  1);
                                                                                                                    jjtn004.jjtSetLastToken(getToken(0));
                                                                                                                    return jjtn004;
                                                                                                                  }
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PAROUV:
        jj_consume_token(PAROUV);
        listexp();
                                                                                                                                                              ASTappelI jjtn005 = new ASTappelI(JJTAPPELI);
                                                                                                                                                              boolean jjtc005 = true;
                                                                                                                                                              jjtree.openNodeScope(jjtn005);
                                                                                                                                                              jjtn005.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(PARFER);
        } finally {
                                                                                                                                                              if (jjtc005) {
                                                                                                                                                                jjtree.closeNodeScope(jjtn005,  2);
                                                                                                                                                                jjtn005.jjtSetLastToken(getToken(0));
                                                                                                                                                                return jjtn005;
                                                                                                                                                              }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case RETURN:
      jj_consume_token(RETURN);
                   ASTretour jjtn006 = new ASTretour(JJTRETOUR);
                   boolean jjtc006 = true;
                   jjtree.openNodeScope(jjtn006);
                   jjtn006.jjtSetFirstToken(getToken(1));
      try {
        exp();
      } catch (Throwable jjte006) {
                   if (jjtc006) {
                     jjtree.clearNodeScope(jjtn006);
                     jjtc006 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte006 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte006;}
                   }
                   if (jjte006 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte006;}
                   }
                   {if (true) throw (Error)jjte006;}
      } finally {
                   if (jjtc006) {
                     jjtree.closeNodeScope(jjtn006,  1);
                     jjtn006.jjtSetLastToken(getToken(0));
                     return jjtn006;
                   }
      }
      break;
    case IF:
      jj_consume_token(IF);
      exp();
      jj_consume_token(ACCOUV);
      instrs();
      jj_consume_token(ACCFER);
                                                ASTsi jjtn008 = new ASTsi(JJTSI);
                                                boolean jjtc008 = true;
                                                jjtree.openNodeScope(jjtn008);
                                                jjtn008.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          jj_consume_token(ACCOUV);
          instrs();
          jj_consume_token(ACCFER);
          break;
        default:
          jj_la1[14] = jj_gen;
                                                                                     ASTinil jjtn007 = new ASTinil(JJTINIL);
                                                                                     boolean jjtc007 = true;
                                                                                     jjtree.openNodeScope(jjtn007);
                                                                                     jjtn007.jjtSetFirstToken(getToken(1));
          try {
                                                                                     jjtree.closeNodeScope(jjtn007, true);
                                                                                     jjtc007 = false;
                                                                                     jjtn007.jjtSetLastToken(getToken(0));

          } finally {
                                                                                     if (jjtc007) {
                                                                                       jjtree.closeNodeScope(jjtn007, true);
                                                                                       jjtn007.jjtSetLastToken(getToken(0));
                                                                                       return jjtn007;
                                                                                     }
          }
        }
      } catch (Throwable jjte008) {
                                                if (jjtc008) {
                                                  jjtree.clearNodeScope(jjtn008);
                                                  jjtc008 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte008 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte008;}
                                                }
                                                if (jjte008 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte008;}
                                                }
                                                {if (true) throw (Error)jjte008;}
      } finally {
                                                if (jjtc008) {
                                                  jjtree.closeNodeScope(jjtn008,  3);
                                                  jjtn008.jjtSetLastToken(getToken(0));
                                                  return jjtn008;
                                                }
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(PAROUV);
      exp();
      jj_consume_token(PARFER);
      jj_consume_token(ACCOUV);
      instrs();
                                                            ASTtantque jjtn009 = new ASTtantque(JJTTANTQUE);
                                                            boolean jjtc009 = true;
                                                            jjtree.openNodeScope(jjtn009);
                                                            jjtn009.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ACCFER);
      } finally {
                                                            if (jjtc009) {
                                                              jjtree.closeNodeScope(jjtn009,  2);
                                                              jjtn009.jjtSetLastToken(getToken(0));
                                                              return jjtn009;
                                                            }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
	return null;
  }

  final public SimpleNode listexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAROUV:
    case FALSE:
    case TRUE:
    case MOINS:
    case NOT:
    case IDENT:
    case NOMBRE:
      exp();
                ASTlistexp jjtn002 = new ASTlistexp(JJTLISTEXP);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          jj_consume_token(VIRG);
          listexp();
          break;
        default:
          jj_la1[16] = jj_gen;
                                    ASTexnil jjtn001 = new ASTexnil(JJTEXNIL);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtn001.jjtSetFirstToken(getToken(1));
          try {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                    jjtn001.jjtSetLastToken(getToken(0));

          } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                      jjtn001.jjtSetLastToken(getToken(0));
                                      return jjtn001;
                                    }
          }
        }
      } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                  jjtn002.jjtSetLastToken(getToken(0));
                  return jjtn002;
                }
      }
      break;
    default:
      jj_la1[17] = jj_gen;
          ASTexnil jjtn003 = new ASTexnil(JJTEXNIL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
      try {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtn003.jjtSetLastToken(getToken(0));

      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
            return jjtn003;
          }
      }
    }
	return null;
  }

  final public void exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                ASTnot jjtn001 = new ASTnot(JJTNOT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        exp2();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  1);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
      }
      break;
    case MOINS:
      jj_consume_token(MOINS);
                   ASTmoinsU jjtn002 = new ASTmoinsU(JJTMOINSU);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
      try {
        exp2();
      } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
      } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  1);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
      }
      break;
    case PAROUV:
    case FALSE:
    case TRUE:
    case IDENT:
    case NOMBRE:
      exp2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ET:
      case OU:
        exp1();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void exp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ET:
      jj_consume_token(ET);
                ASTet jjtn001 = new ASTet(JJTET);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        exp2();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ET:
      case OU:
        exp1();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    case OU:
      jj_consume_token(OU);
                ASTou jjtn002 = new ASTou(JJTOU);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
      try {
        exp2();
      } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                  jjtn002.jjtSetLastToken(getToken(0));
                }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ET:
      case OU:
        exp1();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void exp2() throws ParseException {
    exp4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUPGA:
    case EGAL:
      exp3();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void exp3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EGAL:
      jj_consume_token(EGAL);
                  ASTegal jjtn001 = new ASTegal(JJTEGAL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        exp4();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
      }
      break;
    case SUPGA:
      jj_consume_token(SUPGA);
                   ASTsupga jjtn002 = new ASTsupga(JJTSUPGA);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
      try {
        exp4();
      } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
      } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void exp4() throws ParseException {
    terme();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MOINS:
      exp5();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void exp5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                  ASTplus jjtn001 = new ASTplus(JJTPLUS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        exp4();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
      }
      break;
    case MOINS:
      jj_consume_token(MOINS);
                   ASTmoinsB jjtn002 = new ASTmoinsB(JJTMOINSB);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
      try {
        exp4();
      } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
      } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void terme() throws ParseException {
    fact();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
      terme1();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  final public void terme1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
             ASTmult jjtn001 = new ASTmult(JJTMULT);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
      try {
        fact();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtn001.jjtSetLastToken(getToken(0));
             }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        terme1();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      break;
    case DIV:
      jj_consume_token(DIV);
            ASTdiv jjtn002 = new ASTdiv(JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
      try {
        fact();
      } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        terme1();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void fact() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      ASTvrai jjtn001 = new ASTvrai(JJTVRAI);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(TRUE);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      break;
    case FALSE:
      ASTfaux jjtn002 = new ASTfaux(JJTFAUX);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(FALSE);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
      }
      break;
    case IDENT:
      ident();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAROUV:
        jj_consume_token(PAROUV);
        listexp();
                                   ASTappelE jjtn003 = new ASTappelE(JJTAPPELE);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                   jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(PARFER);
        } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                     jjtn003.jjtSetLastToken(getToken(0));
                                   }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CROOUV:
          jj_consume_token(CROOUV);
          exp();
                                                                         ASTtab jjtn004 = new ASTtab(JJTTAB);
                                                                         boolean jjtc004 = true;
                                                                         jjtree.openNodeScope(jjtn004);
                                                                         jjtn004.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(CROFER);
          } finally {
                                                                         if (jjtc004) {
                                                                           jjtree.closeNodeScope(jjtn004,  2);
                                                                           jjtn004.jjtSetLastToken(getToken(0));
                                                                         }
          }
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
      }
      break;
    case NOMBRE:
      t = jj_consume_token(NOMBRE);
                 ASTnbre jjtn005 = new ASTnbre(JJTNBRE);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
                 jjtn005.jjtSetFirstToken(getToken(1));
                 
      try {
                 jjtree.closeNodeScope(jjtn005, true);
                 jjtc005 = false;
                 jjtn005.jjtSetLastToken(getToken(0));
                jjtn005.value = t.image;
      } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005, true);
                   jjtn005.jjtSetLastToken(getToken(0));
                 }
      }
      break;
    case PAROUV:
      jj_consume_token(PAROUV);
      exp();
      jj_consume_token(PARFER);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.println((jj_ntk==-1)?jj_ntk():jj_ntk);
  }

  final public void ident1() throws ParseException {
    ident();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CROOUV:
      jj_consume_token(CROOUV);
      exp();
                                  ASTtab jjtn001 = new ASTtab(JJTTAB);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(CROFER);
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  final public SimpleNode typemeth() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      ASTrien jjtn001 = new ASTrien(JJTRIEN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(VOID);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
        return jjtn001;
      }
      }
      break;
    case INT:
    case BOOLEAN:
      type();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
	return null;
  }

  final public SimpleNode type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      ASTentier jjtn001 = new ASTentier(JJTENTIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(INT);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
        return jjtn001;
      }
      }
      break;
    case BOOLEAN:
      ASTbooleen jjtn002 = new ASTbooleen(JJTBOOLEEN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BOOLEAN);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
        return jjtn002;
      }
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
	return null;
  }

  /** Generated Token Manager. */
  public MiniJajaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0x200000,0x880,0x200000,0x200000,0x800,0x200000,0x0,0x4000,0x0,0xc40000,0x800,0x0,0x880,0x80000,0xc40000,0x4000,0x2030080,0xc0000000,0x2030080,0xc0000000,0xc0000000,0xc0000000,0x30000000,0x30000000,0x3000000,0x3000000,0xc000000,0xc000000,0xc000000,0xc000000,0x800,0x80,0x30080,0x800,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x70,0x0,0x70,0x70,0x0,0x70,0x2,0x0,0x30,0x80,0x0,0xe,0xe,0x0,0x80,0x0,0x181,0x0,0x181,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x70,0x30,};
   }

  /** Constructor with InputStream. */
  public MiniJaja(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJaja(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJajaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }
  

  /** Constructor. */
  public MiniJaja(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJajaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }
  
  public MiniJaja(String str) {
	  	InputStream stream = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));
	    jj_input_stream = new SimpleCharStream(stream, 1, 1);
	    token_source = new MiniJajaTokenManager(jj_input_stream);
	    token = new Token();
	    jj_ntk = -1;
	    jj_gen = 0;
	    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
	  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJaja(MiniJajaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJajaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
