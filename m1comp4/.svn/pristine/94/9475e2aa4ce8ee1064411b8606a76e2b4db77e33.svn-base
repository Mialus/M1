/* Generated By:JJTree&JavaCC: Do not edit this line. JajaCode.java */
package fr.univfcomte.comp4.analyseur_JajaCode;

public class JajaCode/*@bgen(jjtree)*/implements JajaCodeTreeConstants, JajaCodeConstants {/*@bgen(jjtree)*/
  protected JJTJajaCodeState jjtree = new JJTJajaCodeState();
  public static void main(String args[]) throws ParseException {
        JajaCode parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      parser = new JajaCode(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JajaCode(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java JajaCode < inputfile");
      System.out.println("OR");
      System.out.println("         java JajaCode inputfile");
      return;
    }
    try {
        SimpleNode n = parser.classe();
                /*JajaCodeDefaultVisitor visitor = new JajaCodeDefaultVisitor();
		n.jjtAccept(visitor, null);*/
                n.dump("");
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

// Regles
  final public SimpleNode classe() throws ParseException {
 /*@bgen(jjtree) #JajaCode( 3) */
  ASTJajaCode jjtn000 = new ASTJajaCode(JJTJAJACODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      adresse();
      instrs();
      jj_consume_token(PVIRG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOMBRE:
        classe();
        break;
      default:
        jj_la1[0] = jj_gen;
                                              ASTjcnil jjtn001 = new ASTjcnil(JJTJCNIL);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                              jjtn001.jjtSetFirstToken(getToken(1));
        try {
                                              jjtree.closeNodeScope(jjtn001, true);
                                              jjtc001 = false;
                                              jjtn001.jjtSetLastToken(getToken(0));

        } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001, true);
                                                jjtn001.jjtSetLastToken(getToken(0));
                                              }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
                                                                  jjtree.closeNodeScope(jjtn000,  3);
                                                                  jjtc000 = false;
                                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ident() throws ParseException {
 /*@bgen(jjtree) idents */
 ASTidents jjtn000 = new ASTidents(JJTIDENTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENT);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
               jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void type() throws ParseException {
                    /*@bgen(jjtree) type */
                    ASTtype jjtn000 = new ASTtype(JJTTYPE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTIER:
        t = jj_consume_token(ENTIER);
        break;
      case BOOLEEN:
        t = jj_consume_token(BOOLEEN);
        break;
      case VIDE:
        t = jj_consume_token(VIDE);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                               jjtn000.jjtSetLastToken(getToken(0));
                                              jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void sorte() throws ParseException {
                      /*@bgen(jjtree) sorte */
                      ASTsorte jjtn000 = new ASTsorte(JJTSORTE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        t = jj_consume_token(VAR);
        break;
      case METH:
        t = jj_consume_token(METH);
        break;
      case CST:
        t = jj_consume_token(CST);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           jjtn000.jjtSetLastToken(getToken(0));
                                          jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void adresse() throws ParseException {
 /*@bgen(jjtree) adresse */
 ASTadresse jjtn000 = new ASTadresse(JJTADRESSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(NOMBRE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void instrs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INIT:
      ASTinit jjtn001 = new ASTinit(JJTINIT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(INIT);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      break;
    case SWAP:
          ASTswap jjtn002 = new ASTswap(JJTSWAP);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SWAP);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case NEW:
      jj_consume_token(NEW);
      jj_consume_token(PAROUV);
      ident();
      jj_consume_token(VIRG);
      type();
      jj_consume_token(VIRG);
      sorte();
      jj_consume_token(VIRG);
      adresse();
                                                                               ASTnouv jjtn003 = new ASTnouv(JJTNOUV);
                                                                               boolean jjtc003 = true;
                                                                               jjtree.openNodeScope(jjtn003);
                                                                               jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                                                               if (jjtc003) {
                                                                                 jjtree.closeNodeScope(jjtn003,  4);
                                                                                 jjtn003.jjtSetLastToken(getToken(0));
                                                                               }
      }
      break;
    case NEWARRAY:
      jj_consume_token(NEWARRAY);
      jj_consume_token(PAROUV);
      ident();
      jj_consume_token(VIRG);
      type();
                                                    ASTnewarray jjtn004 = new ASTnewarray(JJTNEWARRAY);
                                                    boolean jjtc004 = true;
                                                    jjtree.openNodeScope(jjtn004);
                                                    jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                                    if (jjtc004) {
                                                      jjtree.closeNodeScope(jjtn004,  2);
                                                      jjtn004.jjtSetLastToken(getToken(0));
                                                    }
      }
      break;
    case INVOKE:
      jj_consume_token(INVOKE);
      jj_consume_token(PAROUV);
      ident();
                                    ASTinvoke jjtn005 = new ASTinvoke(JJTINVOKE);
                                    boolean jjtc005 = true;
                                    jjtree.openNodeScope(jjtn005);
                                    jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                    if (jjtc005) {
                                      jjtree.closeNodeScope(jjtn005,  1);
                                      jjtn005.jjtSetLastToken(getToken(0));
                                    }
      }
      break;
    case RETURN:
          ASTretour jjtn006 = new ASTretour(JJTRETOUR);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtn006.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RETURN);
      } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtn006.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case PUSH:
      jj_consume_token(PUSH);
      jj_consume_token(PAROUV);
      valeur();
                                   ASTpush jjtn007 = new ASTpush(JJTPUSH);
                                   boolean jjtc007 = true;
                                   jjtree.openNodeScope(jjtn007);
                                   jjtn007.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                   if (jjtc007) {
                                     jjtree.closeNodeScope(jjtn007,  1);
                                     jjtn007.jjtSetLastToken(getToken(0));
                                   }
      }
      break;
    case POP:
          ASTpop jjtn008 = new ASTpop(JJTPOP);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtn008.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(POP);
      } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
            jjtn008.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case LOAD:
      jj_consume_token(LOAD);
      jj_consume_token(PAROUV);
      ident();
                                  ASTload jjtn009 = new ASTload(JJTLOAD);
                                  boolean jjtc009 = true;
                                  jjtree.openNodeScope(jjtn009);
                                  jjtn009.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                  if (jjtc009) {
                                    jjtree.closeNodeScope(jjtn009,  1);
                                    jjtn009.jjtSetLastToken(getToken(0));
                                  }
      }
      break;
    case ALOAD:
      jj_consume_token(ALOAD);
      jj_consume_token(PAROUV);
      ident();
                                   ASTaload jjtn010 = new ASTaload(JJTALOAD);
                                   boolean jjtc010 = true;
                                   jjtree.openNodeScope(jjtn010);
                                   jjtn010.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                   if (jjtc010) {
                                     jjtree.closeNodeScope(jjtn010,  1);
                                     jjtn010.jjtSetLastToken(getToken(0));
                                   }
      }
      break;
    case STORE:
      jj_consume_token(STORE);
      jj_consume_token(PAROUV);
      ident();
                                   ASTstore jjtn011 = new ASTstore(JJTSTORE);
                                   boolean jjtc011 = true;
                                   jjtree.openNodeScope(jjtn011);
                                   jjtn011.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                   if (jjtc011) {
                                     jjtree.closeNodeScope(jjtn011,  1);
                                     jjtn011.jjtSetLastToken(getToken(0));
                                   }
      }
      break;
    case ASTORE:
      jj_consume_token(ASTORE);
      jj_consume_token(PAROUV);
      ident();
                                    ASTastore jjtn012 = new ASTastore(JJTASTORE);
                                    boolean jjtc012 = true;
                                    jjtree.openNodeScope(jjtn012);
                                    jjtn012.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                    if (jjtc012) {
                                      jjtree.closeNodeScope(jjtn012,  1);
                                      jjtn012.jjtSetLastToken(getToken(0));
                                    }
      }
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(PAROUV);
      adresse();
                                  ASTsi jjtn013 = new ASTsi(JJTSI);
                                  boolean jjtc013 = true;
                                  jjtree.openNodeScope(jjtn013);
                                  jjtn013.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                  if (jjtc013) {
                                    jjtree.closeNodeScope(jjtn013,  1);
                                    jjtn013.jjtSetLastToken(getToken(0));
                                  }
      }
      break;
    case GOTO:
      jj_consume_token(GOTO);
      jj_consume_token(PAROUV);
      adresse();
                                    ASTallerA jjtn014 = new ASTallerA(JJTALLERA);
                                    boolean jjtc014 = true;
                                    jjtree.openNodeScope(jjtn014);
                                    jjtn014.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                    if (jjtc014) {
                                      jjtree.closeNodeScope(jjtn014,  1);
                                      jjtn014.jjtSetLastToken(getToken(0));
                                    }
      }
      break;
    case INC:
      jj_consume_token(INC);
      jj_consume_token(PAROUV);
      ident();
                                 ASTinc jjtn015 = new ASTinc(JJTINC);
                                 boolean jjtc015 = true;
                                 jjtree.openNodeScope(jjtn015);
                                 jjtn015.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                 if (jjtc015) {
                                   jjtree.closeNodeScope(jjtn015,  1);
                                   jjtn015.jjtSetLastToken(getToken(0));
                                 }
      }
      break;
    case ADD:
    case SUB:
    case SUP:
    case MUL:
    case DIV:
    case AND:
    case OR:
    case NOT:
    case NEG:
    case CMP:
      oper();
      break;
    case AINC:
      jj_consume_token(AINC);
      jj_consume_token(PAROUV);
      ident();
                                  ASTainc jjtn016 = new ASTainc(JJTAINC);
                                  boolean jjtc016 = true;
                                  jjtree.openNodeScope(jjtn016);
                                  jjtn016.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARFER);
      } finally {
                                  if (jjtc016) {
                                    jjtree.closeNodeScope(jjtn016,  1);
                                    jjtn016.jjtSetLastToken(getToken(0));
                                  }
      }
      break;
    case NOP:
          ASTnop jjtn017 = new ASTnop(JJTNOP);
          boolean jjtc017 = true;
          jjtree.openNodeScope(jjtn017);
          jjtn017.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(NOP);
      } finally {
          if (jjtc017) {
            jjtree.closeNodeScope(jjtn017, true);
            jjtn017.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case JCSTOP:
          ASTjcstop jjtn018 = new ASTjcstop(JJTJCSTOP);
          boolean jjtc018 = true;
          jjtree.openNodeScope(jjtn018);
          jjtn018.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(JCSTOP);
      } finally {
          if (jjtc018) {
            jjtree.closeNodeScope(jjtn018, true);
            jjtn018.jjtSetLastToken(getToken(0));
          }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void valeur() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOMBRE:
      nbre();
      break;
    case TRUE:
          ASTvrai jjtn001 = new ASTvrai(JJTVRAI);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(TRUE);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case FALSE:
          ASTfaux jjtn002 = new ASTfaux(JJTFAUX);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(FALSE);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void oper() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
    case SUP:
    case MUL:
    case DIV:
    case AND:
    case OR:
    case CMP:
      oper2();
      break;
    case NOT:
    case NEG:
      oper1();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void oper1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG:
          ASTneg jjtn001 = new ASTneg(JJTNEG);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(NEG);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case NOT:
          ASTnot jjtn002 = new ASTnot(JJTNOT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(NOT);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void oper2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
          ASTadd jjtn001 = new ASTadd(JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ADD);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case SUB:
          ASTsub jjtn002 = new ASTsub(JJTSUB);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SUB);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case MUL:
          ASTmul jjtn003 = new ASTmul(JJTMUL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(MUL);
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case DIV:
          ASTdiv jjtn004 = new ASTdiv(JJTDIV);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(DIV);
      } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
            jjtn004.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case CMP:
          ASTcmp jjtn005 = new ASTcmp(JJTCMP);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(CMP);
      } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
            jjtn005.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case SUP:
          ASTsup jjtn006 = new ASTsup(JJTSUP);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtn006.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SUP);
      } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtn006.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case OR:
          ASTor jjtn007 = new ASTor(JJTOR);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtn007.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(OR);
      } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtn007.jjtSetLastToken(getToken(0));
          }
      }
      break;
    case AND:
          ASTand jjtn008 = new ASTand(JJTAND);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtn008.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(AND);
      } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
            jjtn008.jjtSetLastToken(getToken(0));
          }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void nbre() throws ParseException {
 /*@bgen(jjtree) nbre */
 ASTnbre jjtn000 = new ASTnbre(JJTNBRE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(NOMBRE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  /** Generated Token Manager. */
  public JajaCodeTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x1,0xe000000,0x70000000,0x1ff8000,0x80000000,0x1ff8000,0xc00000,0x13f8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100000,0x0,0x0,0x0,0x7fffd,0x100002,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public JajaCode(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JajaCode(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JajaCodeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JajaCode(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JajaCodeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JajaCode(JajaCodeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JajaCodeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
