/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  STATIC = false;
  VISITOR = true;
  MULTI = true;
  VISITOR_EXCEPTION="JajaCodeException";
  TRACK_TOKENS =true;
}

PARSER_BEGIN(JajaCode)
package fr.univfcomte.comp4.analyseur_JajaCode;

public class JajaCode {

  public static void main(String args[]) throws ParseException {
  	JajaCode parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      parser = new JajaCode(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JajaCode(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java JajaCode < inputfile");
      System.out.println("OR");
      System.out.println("         java JajaCode inputfile");
      return;
    }
    try {
      	SimpleNode n = parser.classe();
		/*JajaCodeDefaultVisitor visitor = new JajaCodeDefaultVisitor();
		n.jjtAccept(visitor, null);*/
		n.dump("");
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

}

PARSER_END(JajaCode)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
//Tokens de la grammaire
 //Identificateurs


//Séparateurs
TOKEN : 
{
    < PAROUV: "(" >
|   < PARFER: ")" >
|   < ACCOUV: "{" >
|   < ACCFER: "}" >
|   < CROOUV: "[" >
|   < CROFER: "]" >
|   < PVIRG: ";" >
|   < VIRG: "," >
}



//Operateurs
TOKEN : 
{
    < ADD: "add">
|   < SUB: "sub">
| 	< SUP: "sup">
|   < MUL: "mul">
|   < DIV: "div">
|   < AND: "and">
|   < OR: "or">
|   < NOT: "not">
| 	< NEG: "neg">
| 	< CMP: "cmp" >
}

//Types
TOKEN :
{
    < ENTIER: "entier">
|   < BOOLEEN: "booleen">
|   < VIDE: "vide">
|   < METH: "meth" >
|	< CST: "cst" >
| 	< VAR: "var" >
}

//Terminaux
TOKEN:
{
    < FALSE: "jcfaux">
|  	< IF: "if" >
|   < TRUE: "jcvrai">
|   < RETURN: "return">| 	< INIT: "init">
| 	< SWAP: "swap">
| 	< NEW: "new">
| 	< NEWARRAY: "newarray">
| 	< INVOKE: "invoke">
| 	< PUSH: "push">
| 	< POP: "pop">
| 	< LOAD: "load">
| 	< ALOAD: "aload">
| 	< STORE: "store">
| 	< ASTORE: "astore">
| 	< GOTO: "goto">
| 	< INC: "inc">
| 	< AINC: "ainc">
| 	< NOP: "nop">
| 	< JCSTOP: "jcstop">
}

TOKEN : 
{

    < IDENT:  <LETTRE> (<LETTRE>|<NOMBRE>)* >    
|   < NOMBRE: (["0"-"9"])+> 
|   < LETTRE: (["a"-"z", "A"-"Z","_"])+>

}

// Regles
SimpleNode classe()  #JajaCode(3):
{}
{
    adresse() instrs() < PVIRG > (classe() |{} #jcnil ) [<EOF >]{return jjtThis;} 
}

void ident() #idents:
{Token t;}
{
    t=<IDENT> {jjtThis.value = t.image;}
}

void type() #type: {Token t;} {
	( t=<ENTIER>| t=<BOOLEEN>| t=<VIDE>) {jjtThis.value = t.image;} 
}

void sorte() #sorte: {Token t;} {
	( t=<VAR> | t=<METH> | t=<CST> ) {jjtThis.value = t.image;} 
}

void adresse() #adresse:
{Token t;}
{
    t=<NOMBRE> {jjtThis.value = t.image;}
}
  
void instrs() #void:
{}{    <INIT>	#init
| 	<SWAP>	#swap
|	<NEW> <PAROUV> ident() <VIRG> type() <VIRG> sorte() <VIRG> adresse() <PARFER> #nouv(4)
|	<NEWARRAY> <PAROUV> ident() <VIRG> type() <PARFER> #newarray(2)
|	<INVOKE> <PAROUV> ident() <PARFER> #invoke(1)
|	<RETURN> #retour
| 	<PUSH> <PAROUV> valeur() <PARFER> #push(1)
| 	<POP> #pop
| 	<LOAD> <PAROUV> ident() <PARFER> #load(1)
| 	<ALOAD> <PAROUV> ident() <PARFER> #aload(1)
| 	<STORE> <PAROUV> ident() <PARFER> #store(1)
| 	<ASTORE> <PAROUV> ident() <PARFER> #astore(1)
| 	<IF> <PAROUV> adresse() <PARFER> #si(1)
| 	<GOTO> <PAROUV> adresse() <PARFER> #allerA(1)
| 	<INC> <PAROUV> ident() <PARFER> #inc(1)
| 	oper()
| 	<AINC> <PAROUV> ident() <PARFER> #ainc(1)
| 	<NOP> #nop
| 	<JCSTOP> #jcstop
}

void valeur() #void:
{}
{
    nbre()
| 	<TRUE> #vrai
| 	<FALSE> #faux
}
void oper() #void:
{}
{
	oper2()
| 	oper1()
}
void oper1() #void:
{}
{
	<NEG> #neg
| 	<NOT> #not
}

void oper2() #void:
{}
{
	<ADD> #add
| 	<SUB> #sub
| 	<MUL> #mul
| 	<DIV> #div
| 	<CMP> #cmp
| 	<SUP> #sup
| 	<OR> #or
| 	<AND> #and
}

void nbre() #nbre:
{Token t;}
{
    t=<NOMBRE> {jjtThis.value = t.image;}
}   