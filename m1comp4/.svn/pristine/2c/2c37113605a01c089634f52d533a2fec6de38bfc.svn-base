/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MiniJaja.jj */
/*@egen*/
/*
 * Copyright \u00c2\u00a9 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  STATIC = true;
                 
               
}

PARSER_BEGIN(MiniJaja)
package fr.univfcomte.comp4.analyseur;

public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMiniJajaState jjtree = new JJTMiniJajaState();

/*@egen*/

  public static void main(String args[]) throws ParseException {
  	MiniJaja parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      parser = new MiniJaja(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new MiniJaja(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java MiniJaja < inputfile");
      System.out.println("OR");
      System.out.println("         java MiniJaja inputfile");
      return;
    }
    try {
      	SimpleNode n = parser.classe();
		MiniJajaDefaultVisitor visitor = new MiniJajaDefaultVisitor();
		n.jjtAccept(visitor, null);
		n.dump("");
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

}

PARSER_END(MiniJaja)
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
//Tokens de la grammaire
 //Identificateurs


//S\u00c3\u00a9parateurs
TOKEN : 
{
    < PAROUV: "(" >
|   < PARFER: ")" >
|   < ACCOUV: "{" >
|   < ACCFER: "}" >
|   < CROOUV: "[" >
|   < CROFER: "]" >
|   < PVIRG: ";" >
|   < VIRG: "," >
}



//Terminaux
TOKEN:
{
    <CLASS: "class">
|   <FALSE: "false">
|   <TRUE: "true">
|   <IF: "if">
|   <ELSE: "else">
|   <MAIN: "main">
|   <FINAL: "final">
|   <RETURN: "return">
|   <WHILE: "while">
}

//Operateurs
TOKEN : 
{
    < PLUS: "+">
|   < MOINS: "-">
|   < MULT: "*">
|   < DIV: "/">
|   < SUPGA: ">">
|   < EGAL: "==">
|   < ET: "&&">
|   < OU: "||">
|   < NOT: "!">
|   < AFFECT: "=">
|   < AFFECTPLUS: "+=">
|   < INCR: "++">
}

//Types
TOKEN :
{
    < INT: "int">
|   < BOOLEAN: "boolean">
|   < VOID: "void">
}

TOKEN : 
{

    < IDENT:  <LETTRE> (<LETTRE>|<NOMBRE>)* >    
|   < NOMBRE: (["0"-"9"])+> 
|   < LETTRE: (["a"-"z", "A"-"Z","_"])+>

}

//R\u00c3\u00a8gles
SimpleNode classe()        :
{/*@bgen(jjtree) classe */
  ASTclasse jjtn000 = new ASTclasse(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classe */
    try {
/*@egen*/
    <CLASS> ident() <ACCOUV> decls() methmain() <ACCFER> [<EOF>]/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ident()       :
{/*@bgen(jjtree) ident */
 ASTident jjtn000 = new ASTident(JJTIDENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ident */
    try {
/*@egen*/
    t=<IDENT>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void decls()      :
{}
{
    decl() <PVIRG>/*@bgen(jjtree) decls */
                   {
                     ASTdecls jjtn001 = new ASTdecls(JJTDECLS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ decls()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/       
|/*@bgen(jjtree) vnil */
        {
          ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
        }
/*@egen*/	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      

}

void decl()      :
{}
{

	typemeth() ident() (<PAROUV> entetes() <PARFER> <ACCOUV> vars() instrs()/*@bgen(jjtree) methode */
                                                                                 {
                                                                                   ASTmethode jjtn001 = new ASTmethode(JJTMETHODE);
                                                                                   boolean jjtc001 = true;
                                                                                   jjtree.openNodeScope(jjtn001);
                                                                                 }
                                                                                 try {
/*@egen*/ <ACCFER>/*@bgen(jjtree)*/
                                                                                 } finally {
                                                                                   if (jjtc001) {
                                                                                     jjtree.closeNodeScope(jjtn001, true);
                                                                                   }
                                                                                 }
/*@egen*/          | (<CROOUV> exp()/*@bgen(jjtree) #tableau( 1) */
                                                                                                                     {
                                                                                                                       ASTtableau jjtn002 = new ASTtableau(JJTTABLEAU);
                                                                                                                       boolean jjtc002 = true;
                                                                                                                       jjtree.openNodeScope(jjtn002);
                                                                                                                     }
                                                                                                                     try {
/*@egen*/ <CROFER>/*@bgen(jjtree)*/
                                                                                                                     } finally {
                                                                                                                       if (jjtc002) {
                                                                                                                         jjtree.closeNodeScope(jjtn002,  1);
                                                                                                                       }
                                                                                                                     }
/*@egen*/             |/*@bgen(jjtree) var */
                                                                                                                                            {
                                                                                                                                              ASTvar jjtn003 = new ASTvar(JJTVAR);
                                                                                                                                              boolean jjtc003 = true;
                                                                                                                                              jjtree.openNodeScope(jjtn003);
                                                                                                                                            }
                                                                                                                                            try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                                                                                                                                            } catch (Throwable jjte003) {
                                                                                                                                              if (jjtc003) {
                                                                                                                                                jjtree.clearNodeScope(jjtn003);
                                                                                                                                                jjtc003 = false;
                                                                                                                                              } else {
                                                                                                                                                jjtree.popNode();
                                                                                                                                              }
                                                                                                                                              if (jjte003 instanceof RuntimeException) {
                                                                                                                                                throw (RuntimeException)jjte003;
                                                                                                                                              }
                                                                                                                                              if (jjte003 instanceof ParseException) {
                                                                                                                                                throw (ParseException)jjte003;
                                                                                                                                              }
                                                                                                                                              throw (Error)jjte003;
                                                                                                                                            } finally {
                                                                                                                                              if (jjtc003) {
                                                                                                                                                jjtree.closeNodeScope(jjtn003, true);
                                                                                                                                              }
                                                                                                                                            }
/*@egen*/     ))
|	<FINAL> type() ident()/*@bgen(jjtree) cst */
                               {
                                 ASTcst jjtn004 = new ASTcst(JJTCST);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                               }
                               try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                               } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte004;
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   throw (ParseException)jjte004;
                                 }
                                 throw (Error)jjte004;
                               } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004, true);
                                 }
                               }
/*@egen*/     
}

void vars()      :
{}
{
    var() <PVIRG>/*@bgen(jjtree) vars */
                  {
                    ASTvars jjtn001 = new ASTvars(JJTVARS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ vars()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/      
|/*@bgen(jjtree) vnil */
        {
          ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
        }
/*@egen*/	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      
}

void var()      :
{}
{
	typemeth() ident() ( <CROOUV> exp()/*@bgen(jjtree) tableau */
                                            {
                                              ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                            }
                                            try {
/*@egen*/ <CROFER>/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001, true);
                                              }
                                            }
/*@egen*/          |/*@bgen(jjtree) var */
                                                                {
                                                                  ASTvar jjtn002 = new ASTvar(JJTVAR);
                                                                  boolean jjtc002 = true;
                                                                  jjtree.openNodeScope(jjtn002);
                                                                }
                                                                try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                                                                } catch (Throwable jjte002) {
                                                                  if (jjtc002) {
                                                                    jjtree.clearNodeScope(jjtn002);
                                                                    jjtc002 = false;
                                                                  } else {
                                                                    jjtree.popNode();
                                                                  }
                                                                  if (jjte002 instanceof RuntimeException) {
                                                                    throw (RuntimeException)jjte002;
                                                                  }
                                                                  if (jjte002 instanceof ParseException) {
                                                                    throw (ParseException)jjte002;
                                                                  }
                                                                  throw (Error)jjte002;
                                                                } finally {
                                                                  if (jjtc002) {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                  }
                                                                }
/*@egen*/      )
|	<FINAL> type() ident()/*@bgen(jjtree) cst */
                               {
                                 ASTcst jjtn003 = new ASTcst(JJTCST);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                               } catch (Throwable jjte003) {
                                 if (jjtc003) {
                                   jjtree.clearNodeScope(jjtn003);
                                   jjtc003 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte003 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte003;
                                 }
                                 if (jjte003 instanceof ParseException) {
                                   throw (ParseException)jjte003;
                                 }
                                 throw (Error)jjte003;
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
                               }
/*@egen*/     
}

void vexp()      :
{}
{
    <AFFECT> exp()
|/*@bgen(jjtree) omega */
        {
          ASTomega jjtn001 = new ASTomega(JJTOMEGA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       
}

void methode()         :
{/*@bgen(jjtree) methode */
  ASTmethode jjtn000 = new ASTmethode(JJTMETHODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) methode */
        try {
/*@egen*/
	typemeth() ident() <PAROUV> entetes() <PARFER> <ACCOUV> vars() instrs() <ACCFER>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void methmain()      :
{/*@bgen(jjtree) main */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) main */
    try {
/*@egen*/
    <MAIN> <ACCOUV> vars() instrs() <ACCFER>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void entetes()      :
{}
{
    entete()/*@bgen(jjtree) entetes */
             {
               ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ [<VIRG> entetes()]/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/         
|/*@bgen(jjtree) enil */
        {
          ASTenil jjtn002 = new ASTenil(JJTENIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
        }
/*@egen*/	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      

}

void entete()        :
{/*@bgen(jjtree) entete */
  ASTentete jjtn000 = new ASTentete(JJTENTETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) entete */
    try {
/*@egen*/
    type() ident()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void instrs()      :
{}
{
    instr() <PVIRG>/*@bgen(jjtree) instrs */
                    {
                      ASTinstrs jjtn001 = new ASTinstrs(JJTINSTRS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ instrs()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/        
|/*@bgen(jjtree) inil */
        {
          ASTinil jjtn002 = new ASTinil(JJTINIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
        }
/*@egen*/	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      
}

void instr()      :
{}
{
    ident() (([<CROOUV> exp()/*@bgen(jjtree) tab */
                              {
                                ASTtab jjtn001 = new ASTtab(JJTTAB);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ <CROFER>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/     ]  ( <AFFECT>/*@bgen(jjtree) affectation */
                                                         {
                                                           ASTaffectation jjtn002 = new ASTaffectation(JJTAFFECTATION);
                                                           boolean jjtc002 = true;
                                                           jjtree.openNodeScope(jjtn002);
                                                         }
                                                         try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte002) {
                                                           if (jjtc002) {
                                                             jjtree.clearNodeScope(jjtn002);
                                                             jjtc002 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte002 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte002;
                                                           }
                                                           if (jjte002 instanceof ParseException) {
                                                             throw (ParseException)jjte002;
                                                           }
                                                           throw (Error)jjte002;
                                                         } finally {
                                                           if (jjtc002) {
                                                             jjtree.closeNodeScope(jjtn002, true);
                                                           }
                                                         }
/*@egen*/              | <AFFECTPLUS>/*@bgen(jjtree) somme */
                                                                                           {
                                                                                             ASTsomme jjtn003 = new ASTsomme(JJTSOMME);
                                                                                             boolean jjtc003 = true;
                                                                                             jjtree.openNodeScope(jjtn003);
                                                                                           }
                                                                                           try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                                                                                           } catch (Throwable jjte003) {
                                                                                             if (jjtc003) {
                                                                                               jjtree.clearNodeScope(jjtn003);
                                                                                               jjtc003 = false;
                                                                                             } else {
                                                                                               jjtree.popNode();
                                                                                             }
                                                                                             if (jjte003 instanceof RuntimeException) {
                                                                                               throw (RuntimeException)jjte003;
                                                                                             }
                                                                                             if (jjte003 instanceof ParseException) {
                                                                                               throw (ParseException)jjte003;
                                                                                             }
                                                                                             throw (Error)jjte003;
                                                                                           } finally {
                                                                                             if (jjtc003) {
                                                                                               jjtree.closeNodeScope(jjtn003, true);
                                                                                             }
                                                                                           }
/*@egen*/       |/*@bgen(jjtree) increment */
                                                                                                         {
                                                                                                           ASTincrement jjtn004 = new ASTincrement(JJTINCREMENT);
                                                                                                           boolean jjtc004 = true;
                                                                                                           jjtree.openNodeScope(jjtn004);
                                                                                                         }
                                                                                                         try {
/*@egen*/ <INCR>/*@bgen(jjtree)*/
                                                                                                         } finally {
                                                                                                           if (jjtc004) {
                                                                                                             jjtree.closeNodeScope(jjtn004, true);
                                                                                                           }
                                                                                                         }
/*@egen*/           )) | <PAROUV> listexp()/*@bgen(jjtree) appelI */
                                                                                                                                                  {
                                                                                                                                                    ASTappelI jjtn005 = new ASTappelI(JJTAPPELI);
                                                                                                                                                    boolean jjtc005 = true;
                                                                                                                                                    jjtree.openNodeScope(jjtn005);
                                                                                                                                                  }
                                                                                                                                                  try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                                                                                                                                  } finally {
                                                                                                                                                    if (jjtc005) {
                                                                                                                                                      jjtree.closeNodeScope(jjtn005, true);
                                                                                                                                                    }
                                                                                                                                                  }
/*@egen*/        )
| 	<RETURN>/*@bgen(jjtree) retour */
                 {
                   ASTretour jjtn006 = new ASTretour(JJTRETOUR);
                   boolean jjtc006 = true;
                   jjtree.openNodeScope(jjtn006);
                 }
                 try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                 } catch (Throwable jjte006) {
                   if (jjtc006) {
                     jjtree.clearNodeScope(jjtn006);
                     jjtc006 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte006 instanceof RuntimeException) {
                     throw (RuntimeException)jjte006;
                   }
                   if (jjte006 instanceof ParseException) {
                     throw (ParseException)jjte006;
                   }
                   throw (Error)jjte006;
                 } finally {
                   if (jjtc006) {
                     jjtree.closeNodeScope(jjtn006, true);
                   }
                 }
/*@egen*/        
| 	<IF> exp() <ACCOUV> instrs() <ACCFER>/*@bgen(jjtree) si */
                                              {
                                                ASTsi jjtn007 = new ASTsi(JJTSI);
                                                boolean jjtc007 = true;
                                                jjtree.openNodeScope(jjtn007);
                                              }
                                              try {
/*@egen*/ [ <ELSE> <ACCOUV> instrs() <ACCFER>]/*@bgen(jjtree)*/
                                              } catch (Throwable jjte007) {
                                                if (jjtc007) {
                                                  jjtree.clearNodeScope(jjtn007);
                                                  jjtc007 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte007 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte007;
                                                }
                                                if (jjte007 instanceof ParseException) {
                                                  throw (ParseException)jjte007;
                                                }
                                                throw (Error)jjte007;
                                              } finally {
                                                if (jjtc007) {
                                                  jjtree.closeNodeScope(jjtn007, true);
                                                }
                                              }
/*@egen*/    
| 	<WHILE> exp() <ACCOUV> instrs()/*@bgen(jjtree) tantque */
                                        {
                                          ASTtantque jjtn008 = new ASTtantque(JJTTANTQUE);
                                          boolean jjtc008 = true;
                                          jjtree.openNodeScope(jjtn008);
                                        }
                                        try {
/*@egen*/ <ACCFER>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc008) {
                                            jjtree.closeNodeScope(jjtn008, true);
                                          }
                                        }
/*@egen*/         
}

void listexp()      :
{}
{
	exp()/*@bgen(jjtree) listexp */
              {
                ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ [<VIRG> listexp()]/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/         
|/*@bgen(jjtree) exnil */
        {
          ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
        }
/*@egen*/	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/       
}

void exp()      :
{}
{
    <NOT>exp2()/*@bgen(jjtree) not */
                {
                  ASTnot jjtn001 = new ASTnot(JJTNOT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ [exp1()]/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/     
|   exp2() [exp1()]
}

void exp1()      :
{}
{
    <ET> exp2()/*@bgen(jjtree) et */
                {
                  ASTet jjtn001 = new ASTet(JJTET);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ [exp1()]/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/    
|   <OU> exp2()/*@bgen(jjtree) ou */
                {
                  ASTou jjtn002 = new ASTou(JJTOU);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ [exp1()]/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/    

}

void exp2()      :
{}
{
    exp4() [exp3()]
}

void exp3()      :
{}
{
    <EGAL> exp4()/*@bgen(jjtree) egal */
                  {
                    ASTegal jjtn001 = new ASTegal(JJTEGAL);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ [exp3()]/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/      
|   <SUPGA> exp4()/*@bgen(jjtree) supga */
                   {
                     ASTsupga jjtn002 = new ASTsupga(JJTSUPGA);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*/ [exp3()]/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
                   }
/*@egen*/       

}

void exp4()      :
{}
{
    <MOINS> terme()/*@bgen(jjtree) moinsU */
                    {
                      ASTmoinsU jjtn001 = new ASTmoinsU(JJTMOINSU);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ [exp5()]/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/        
|   terme() [exp5()]
}

void exp5()      :
{}
{
    <PLUS> terme()/*@bgen(jjtree) plus */
                   {
                     ASTplus jjtn001 = new ASTplus(JJTPLUS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ [exp5()]/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/      
|    <MOINS> terme()/*@bgen(jjtree) moinsB */
                     {
                       ASTmoinsB jjtn002 = new ASTmoinsB(JJTMOINSB);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*/ [exp5()]/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/        
   
}

void terme()      :
{}
{
    fact() [terme1()]
}

void terme1()      :
{}
{
    <MULT> fact()/*@bgen(jjtree) mult */
                  {
                    ASTmult jjtn001 = new ASTmult(JJTMULT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ [terme1()]/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/      
|   <DIV> fact()/*@bgen(jjtree) div */
                 {
                   ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ [terme1()]/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/     
}

void fact()      :
{Token t;}
{
    
    t=<TRUE>/*@bgen(jjtree) vrai */
             {
               ASTvrai jjtn001 = new ASTvrai(JJTVRAI);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/      
|   t=<FALSE>/*@bgen(jjtree) faux */
              {
                ASTfaux jjtn002 = new ASTfaux(JJTFAUX);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
              }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/      
|   ident() ( <PAROUV> listexp()/*@bgen(jjtree) appelE */
                                 {
                                   ASTappelE jjtn003 = new ASTappelE(JJTAPPELE);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*/ <PARFER>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003, true);
                                   }
                                 }
/*@egen*/         | [<CROOUV> exp()/*@bgen(jjtree) tab */
                                                                    {
                                                                      ASTtab jjtn004 = new ASTtab(JJTTAB);
                                                                      boolean jjtc004 = true;
                                                                      jjtree.openNodeScope(jjtn004);
                                                                    }
                                                                    try {
/*@egen*/ <CROFER>/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc004) {
                                                                        jjtree.closeNodeScope(jjtn004, true);
                                                                      }
                                                                    }
/*@egen*/     ]  )
|   t=<NOMBRE>/*@bgen(jjtree) nbre */
               {
                 ASTnbre jjtn005 = new ASTnbre(JJTNBRE);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn005, true);
                 jjtc005 = false;
               }
/*@egen*/ {jjtn005.value = t.image;}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005, true);
                 }
               }
/*@egen*/      
|   <PAROUV> exp() <PARFER>

}

void ident1()      :
{}
{
	ident() [<CROOUV> exp()/*@bgen(jjtree) tab */
                                {
                                  ASTtab jjtn001 = new ASTtab(JJTTAB);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ <CROFER>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
                                }
/*@egen*/      ] 
}

void typemeth()      :
{Token t;}
{/*@bgen(jjtree) rien */
    {
      ASTrien jjtn001 = new ASTrien(JJTRIEN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    t=<VOID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      
|   type()
}

void type()      :
{Token t;}
{/*@bgen(jjtree) entier */
    {
      ASTentier jjtn001 = new ASTentier(JJTENTIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    t=<INT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/        
|/*@bgen(jjtree) booleen */
    {
      ASTbooleen jjtn002 = new ASTbooleen(JJTBOOLEEN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/   t=<BOOLEAN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/         
}
