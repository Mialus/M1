/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJaja.java */
package fr.univfcomte.comp4.analyseur;

public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants, MiniJajaConstants {/*@bgen(jjtree)*/
  protected static JJTMiniJajaState jjtree = new JJTMiniJajaState();
  public static void main(String args[]) throws ParseException {
        MiniJaja parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      parser = new MiniJaja(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new MiniJaja(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java MiniJaja < inputfile");
      System.out.println("OR");
      System.out.println("         java MiniJaja inputfile");
      return;
    }
    try {
      SimpleNode n = parser.classe();
        n.dump("");
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

//RÃ¨gles
  static final public SimpleNode classe() throws ParseException {
 /*@bgen(jjtree) classe */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      ident();
      jj_consume_token(ACCOUV);
      decls();
      methmain();
      jj_consume_token(ACCFER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ident() throws ParseException {
 /*@bgen(jjtree) ident */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void decls() throws ParseException {
 /*@bgen(jjtree) decls */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case INT:
      case BOOLEAN:
      case VOID:
        decl();
        jj_consume_token(PVIRG);
        decls();
        break;
      default:
        jj_la1[1] = jj_gen;
          SimpleNode jjtn001 = new SimpleNode(JJTVNIL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;

        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void decl() throws ParseException {
 /*@bgen(jjtree) decl */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case VOID:
        typemeth();
        ident();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PAROUV:
          jj_consume_token(PAROUV);
          entetes();
          jj_consume_token(PARFER);
          jj_consume_token(ACCOUV);
          vars();
          instrs();
          jj_consume_token(ACCFER);
          break;
        default:
          jj_la1[3] = jj_gen;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CROOUV:
            jj_consume_token(CROOUV);
            exp();
            jj_consume_token(CROFER);
            break;
          default:
            jj_la1[2] = jj_gen;
            vexp();
          }
        }
        break;
      case FINAL:
        jj_consume_token(FINAL);
        type();
        ident();
        vexp();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void vars() throws ParseException {
 /*@bgen(jjtree) vars */
  SimpleNode jjtn000 = new SimpleNode(JJTVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case INT:
      case BOOLEAN:
      case VOID:
        var();
        jj_consume_token(PVIRG);
        vars();
        break;
      default:
        jj_la1[5] = jj_gen;
          SimpleNode jjtn001 = new SimpleNode(JJTVNIL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;

        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void var() throws ParseException {
 /*@bgen(jjtree) var */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case VOID:
        typemeth();
        ident();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CROOUV:
          jj_consume_token(CROOUV);
          exp();
          jj_consume_token(CROFER);
          break;
        default:
          jj_la1[6] = jj_gen;
          vexp();
        }
        break;
      case FINAL:
        jj_consume_token(FINAL);
        type();
        ident();
        vexp();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void vexp() throws ParseException {
 /*@bgen(jjtree) vexp */
  SimpleNode jjtn000 = new SimpleNode(JJTVEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AFFECT:
        jj_consume_token(AFFECT);
        exp();
        break;
      default:
        jj_la1[8] = jj_gen;
          SimpleNode jjtn001 = new SimpleNode(JJTOMEGA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;

        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void methode() throws ParseException {
 /*@bgen(jjtree) methode */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      typemeth();
      ident();
      jj_consume_token(PAROUV);
      entetes();
      jj_consume_token(PARFER);
      jj_consume_token(ACCOUV);
      vars();
      instrs();
      jj_consume_token(ACCFER);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void methmain() throws ParseException {
 /*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(ACCOUV);
      vars();
      instrs();
      jj_consume_token(ACCFER);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void entetes() throws ParseException {
 /*@bgen(jjtree) entetes */
  SimpleNode jjtn000 = new SimpleNode(JJTENTETES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
        entete();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          jj_consume_token(VIRG);
          entetes();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[10] = jj_gen;
          SimpleNode jjtn001 = new SimpleNode(JJTENIL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;

        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void entete() throws ParseException {
 /*@bgen(jjtree) entete */
  SimpleNode jjtn000 = new SimpleNode(JJTENTETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      ident();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void instrs() throws ParseException {
 /*@bgen(jjtree) instrs */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case RETURN:
      case WHILE:
      case IDENT:
        instr();
        jj_consume_token(PVIRG);
        instrs();
        break;
      default:
        jj_la1[11] = jj_gen;
          SimpleNode jjtn001 = new SimpleNode(JJTINIL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;

        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void instr() throws ParseException {
 /*@bgen(jjtree) instr */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ident();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CROOUV:
        case AFFECT:
        case AFFECTPLUS:
        case INCR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CROOUV:
            jj_consume_token(CROOUV);
            exp();
            jj_consume_token(CROFER);
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AFFECT:
            jj_consume_token(AFFECT);
            exp();
            break;
          case AFFECTPLUS:
            jj_consume_token(AFFECTPLUS);
            exp();
            break;
          case INCR:
            jj_consume_token(INCR);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case PAROUV:
          jj_consume_token(PAROUV);
          listexp();
          jj_consume_token(PARFER);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case RETURN:
        jj_consume_token(RETURN);
        exp();
        break;
      case IF:
        jj_consume_token(IF);
        exp();
        jj_consume_token(ACCOUV);
        instrs();
        jj_consume_token(ACCFER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          jj_consume_token(ACCOUV);
          instrs();
          jj_consume_token(ACCFER);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case WHILE:
        jj_consume_token(WHILE);
        exp();
        jj_consume_token(ACCOUV);
        instrs();
        jj_consume_token(ACCFER);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void listexp() throws ParseException {
 /*@bgen(jjtree) listexp */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAROUV:
      case FALSE:
      case TRUE:
      case MOINS:
      case NOT:
      case IDENT:
      case NOMBRE:
        exp();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          jj_consume_token(VIRG);
          listexp();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[18] = jj_gen;
          SimpleNode jjtn001 = new SimpleNode(JJTEXNIL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;

        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void exp() throws ParseException {
 /*@bgen(jjtree) exp */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        exp2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ET:
        case OU:
          exp1();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
      case PAROUV:
      case FALSE:
      case TRUE:
      case MOINS:
      case IDENT:
      case NOMBRE:
        exp2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ET:
        case OU:
          exp1();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void exp1() throws ParseException {
 /*@bgen(jjtree) exp1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ET:
        jj_consume_token(ET);
        exp2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ET:
        case OU:
          exp1();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
      case OU:
        jj_consume_token(OU);
        exp2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ET:
        case OU:
          exp1();
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void exp2() throws ParseException {
 /*@bgen(jjtree) exp2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      exp4();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUPGA:
      case EGAL:
        exp3();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void exp3() throws ParseException {
 /*@bgen(jjtree) exp3 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EGAL:
        jj_consume_token(EGAL);
        exp4();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPGA:
        case EGAL:
          exp3();
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
      case SUPGA:
        jj_consume_token(SUPGA);
        exp4();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPGA:
        case EGAL:
          exp3();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void exp4() throws ParseException {
 /*@bgen(jjtree) exp4 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOINS:
        jj_consume_token(MOINS);
        terme();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MOINS:
          exp5();
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        break;
      case PAROUV:
      case FALSE:
      case TRUE:
      case IDENT:
      case NOMBRE:
        terme();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MOINS:
          exp5();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void exp5() throws ParseException {
 /*@bgen(jjtree) exp5 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        terme();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MOINS:
          exp5();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        break;
      case MOINS:
        jj_consume_token(MOINS);
        terme();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MOINS:
          exp5();
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void terme() throws ParseException {
 /*@bgen(jjtree) terme */
  SimpleNode jjtn000 = new SimpleNode(JJTTERME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      fact();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        terme1();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void terme1() throws ParseException {
 /*@bgen(jjtree) terme1 */
  SimpleNode jjtn000 = new SimpleNode(JJTTERME1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        fact();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIV:
          terme1();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        break;
      case DIV:
        jj_consume_token(DIV);
        fact();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIV:
          terme1();
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void fact() throws ParseException {
 /*@bgen(jjtree) fact */
  SimpleNode jjtn000 = new SimpleNode(JJTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case IDENT:
        ident();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PAROUV:
          jj_consume_token(PAROUV);
          listexp();
          jj_consume_token(PARFER);
          break;
        default:
          jj_la1[40] = jj_gen;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CROOUV:
            jj_consume_token(CROOUV);
            exp();
            jj_consume_token(CROFER);
            break;
          default:
            jj_la1[39] = jj_gen;
            ;
          }
        }
        break;
      case NOMBRE:
        jj_consume_token(NOMBRE);
        break;
      case PAROUV:
        jj_consume_token(PAROUV);
        exp();
        jj_consume_token(PARFER);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ident1() throws ParseException {
 /*@bgen(jjtree) ident1 */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENT1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ident();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROOUV:
        jj_consume_token(CROOUV);
        exp();
        jj_consume_token(CROFER);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void typemeth() throws ParseException {
 /*@bgen(jjtree) typemeth */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEMETH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      SimpleNode jjtn001 = new SimpleNode(JJTRIEN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(VOID);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case INT:
      case BOOLEAN:
        type();
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void type() throws ParseException {
 /*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      SimpleNode jjtn001 = new SimpleNode(JJTENTIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(INT);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case BOOLEAN:
      SimpleNode jjtn002 = new SimpleNode(JJTBOOLEEN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(BOOLEAN);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJajaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0x200000,0x800,0x80,0x200000,0x200000,0x800,0x200000,0x0,0x4000,0x0,0xc40000,0x800,0x0,0x880,0x80000,0xc40000,0x4000,0x2030080,0xc0000000,0xc0000000,0x2030080,0xc0000000,0xc0000000,0xc0000000,0x30000000,0x30000000,0x30000000,0x30000000,0x3000000,0x3000000,0x2030080,0x3000000,0x3000000,0x3000000,0xc000000,0xc000000,0xc000000,0xc000000,0x800,0x80,0x30080,0x800,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x70,0x0,0x0,0x70,0x70,0x0,0x70,0x2,0x0,0x30,0x80,0x0,0xe,0xe,0x0,0x80,0x0,0x181,0x0,0x0,0x181,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x70,0x30,};
   }

  /** Constructor with InputStream. */
  public MiniJaja(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJaja(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJajaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniJaja(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJajaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJaja(MiniJajaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJajaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
