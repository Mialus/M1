
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  STATIC = true;
  VISITOR = true;
  MULTI = true;
}

PARSER_BEGIN(MiniJaja)
package fr.univfcomte.comp4.analyseur;

public class MiniJaja {

  public static void main(String args[]) throws ParseException {
  	MiniJaja parser;
    if (args.length == 0) {
      System.out.println("JavaCC Parser:  Reading from standard input . . .");
      parser = new MiniJaja(System.in);
    } else if (args.length == 1) {
      System.out.println("JavaCC Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new MiniJaja(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JavaCC Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JavaCC Parser:  Usage is one of:");
      System.out.println("         java MiniJaja < inputfile");
      System.out.println("OR");
      System.out.println("         java MiniJaja inputfile");
      return;
    }
    try {
      	SimpleNode n = parser.classe();
		MiniJajaDefaultVisitor visitor = new MiniJajaDefaultVisitor();
		n.jjtAccept(visitor, null);
		n.dump("");
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
  }

}

PARSER_END(MiniJaja)
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
//Tokens de la grammaire
 //Identificateurs


//Séparateurs
TOKEN : 
{
    < PAROUV: "(" >
|   < PARFER: ")" >
|   < ACCOUV: "{" >
|   < ACCFER: "}" >
|   < CROOUV: "[" >
|   < CROFER: "]" >
|   < PVIRG: ";" >
|   < VIRG: "," >
}



//Terminaux
TOKEN:
{
    <CLASS: "class">
|   <FALSE: "false">
|   <TRUE: "true">
|   <IF: "if">
|   <ELSE: "else">
|   <MAIN: "main">
|   <FINAL: "final">
|   <RETURN: "return">
|   <WHILE: "while">
}

//Operateurs
TOKEN : 
{
    < PLUS: "+">
|   < MOINS: "-">
|   < MULT: "*">
|   < DIV: "/">
|   < SUPGA: ">">
|   < EGAL: "==">
|   < ET: "&&">
|   < OU: "||">
|   < NOT: "!">
|   < AFFECT: "=">
|   < AFFECTPLUS: "+=">
|   < INCR: "++">
}

//Types
TOKEN :
{
    < INT: "int">
|   < BOOLEAN: "boolean">
|   < VOID: "void">
}

TOKEN : 
{

    < IDENT:  <LETTRE> (<LETTRE>|<NOMBRE>)* >    
|   < NOMBRE: (["0"-"9"])+> 
|   < LETTRE: (["a"-"z", "A"-"Z","_"])+>

}

//Règles
SimpleNode classe() #classe:
{}
{
    <CLASS> ident() <ACCOUV> decls() methmain() <ACCFER> [<EOF>]{return jjtThis;}
}

void ident() #ident:
{Token t;}
{
    t=<IDENT> {jjtThis.value = t.image;}
}

void decls() #void:
{}
{
    decl() <PVIRG> decls() #decls
|	{} #vnil

}

void decl() #void:
{}
{

	typemeth() ident() (<PAROUV> entetes() <PARFER> <ACCOUV> vars() instrs() <ACCFER> #methode | (<CROOUV> exp() <CROFER> #tableau(1) | vexp() #var))
|	<FINAL> type() ident() vexp() #cst
}

void vars() #void:
{}
{
    var() <PVIRG> vars() #vars
|	{} #vnil
}

void var() #void:
{}
{
	typemeth() ident() ( <CROOUV> exp() <CROFER> #tableau | vexp() #var )
|	<FINAL> type() ident() vexp() #cst
}

void vexp() #void:
{}
{
    <AFFECT> exp()
|	{} #omega
}

void methode() #methode:
{}
{
	typemeth() ident() <PAROUV> entetes() <PARFER> <ACCOUV> vars() instrs() <ACCFER>
}

void methmain() #main:
{}
{
    <MAIN> <ACCOUV> vars() instrs() <ACCFER>
}

void entetes() #void:
{}
{
    entete() [<VIRG> entetes()] #entetes
|	{} #enil

}

void entete() #entete:
{}
{
    type() ident()
}

void instrs() #void:
{}
{
    instr() <PVIRG> instrs() #instrs
|	{} #inil
}

void instr() #void:
{}
{
    ident() (([<CROOUV> exp() <CROFER> #tab]  ( <AFFECT> exp() #affectation | <AFFECTPLUS> exp() #somme| <INCR> #increment)) | <PAROUV> listexp() <PARFER> #appelI)
| 	<RETURN> exp() #retour
| 	<IF> exp() <ACCOUV> instrs() <ACCFER> [ <ELSE> <ACCOUV> instrs() <ACCFER>] #si
| 	<WHILE> exp() <ACCOUV> instrs() <ACCFER> #tantque
}

void listexp() #void:
{}
{
	exp() [<VIRG> listexp()] #listexp
|	{} #exnil
}

void exp() #void:
{}
{
    <NOT>exp2() [exp1()] #not
|   exp2() [exp1()]
}

void exp1() #void:
{}
{
    <ET> exp2() [exp1()] #et
|   <OU> exp2() [exp1()] #ou

}

void exp2() #void:
{}
{
    exp4() [exp3()]
}

void exp3() #void:
{}
{
    <EGAL> exp4() [exp3()] #egal
|   <SUPGA> exp4() [exp3()] #supga

}

void exp4() #void:
{}
{
    <MOINS> terme() [exp5()] #moinsU
|   terme() [exp5()]
}

void exp5() #void:
{}
{
    <PLUS> terme() [exp5()] #plus
|    <MOINS> terme() [exp5()] #moinsB
   
}

void terme() #void:
{}
{
    fact() [terme1()]
}

void terme1() #void:
{}
{
    <MULT> fact() [terme1()] #mult
|   <DIV> fact() [terme1()] #div
}

void fact() #void:
{Token t;}
{
    
    t=<TRUE> {jjtThis.value = t.image;} #vrai
|   t=<FALSE> {jjtThis.value = t.image;} #faux
|   ident() ( <PAROUV> listexp() <PARFER> #appelE | [<CROOUV> exp() <CROFER> #tab]  )
|   t=<NOMBRE> {jjtThis.value = t.image;} #nbre
|   <PAROUV> exp() <PARFER>

}

void ident1() #void:
{}
{
	ident() [<CROOUV> exp() <CROFER> #tab ] 
}

void typemeth() #void:
{Token t;}
{
    t=<VOID> #rien
|   type()
}

void type() #void:
{Token t;}
{
    t=<INT> #entier
|   t=<BOOLEAN> #booleen
}
