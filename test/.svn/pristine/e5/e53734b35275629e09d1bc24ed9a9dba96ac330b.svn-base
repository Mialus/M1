/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.univfcomte.comp4.guid;

import fr.univfcomte.comp4.analyseur.MiniJaja;
import fr.univfcomte.comp4.analyseur.MiniJajaException;
import fr.univfcomte.comp4.analyseur.ParseException;
import fr.univfcomte.comp4.analyseur.SimpleNode;
import fr.univfcomte.comp4.interpreteur_MiniJaja.MemoireListener;
import fr.univfcomte.comp4.interpreteur_MiniJaja.MiniJajaInterpreteurVisitor;
import fr.univfcomte.comp4.memoire.Memoire;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.*;

/**
 *
 * @author f2e
 */
public class JFrameMain extends javax.swing.JFrame implements MemoireListener {

    private int nombreInstructions;
    private String miniJajaText;
    private InputStream miniJajaStream;
    private MiniJaja parser;
    private String miniJajaPath;
    private SimpleNode arbreMiniJaja;
    private boolean mjjInitialiser;
    private boolean threadRunning;
    private boolean pasapas;

    /**
     * Creates new form JFrameMain
     */
    public JFrameMain() {
        this.nombreInstructions = 0;
        this.miniJajaText = "";
        this.mjjInitialiser = false;
        this.threadRunning = false;
        this.pasapas = false;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        miniJajaScollPane = new javax.swing.JScrollPane();
        miniJajaSaisie = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        boutonAnalyse = new javax.swing.JButton();
        boutonInterpretation = new javax.swing.JButton();
        boutonPasAPas = new javax.swing.JButton();
        analyseScrollPane = new javax.swing.JScrollPane();
        analyseTexteAffichage = new javax.swing.JTextArea();
        ongletsMemoire = new javax.swing.JTabbedPane();
        menu = new javax.swing.JMenuBar();
        menuFichier = new javax.swing.JMenu();
        ouvrirMenuItem = new javax.swing.JMenuItem();
        enregistrerMenuItem = new javax.swing.JMenuItem();
        enregisterSousMenuItem = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu5.setText("jMenu5");

        jMenu6.setText("jMenu6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        miniJajaSaisie.setColumns(20);
        miniJajaSaisie.setRows(5);
        miniJajaSaisie.setTabSize(3);
        miniJajaSaisie.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        miniJajaSaisie.setDragEnabled(true);
        miniJajaScollPane.setViewportView(miniJajaSaisie);

        jToolBar1.setRollover(true);

        boutonAnalyse.setText("Analyser");
        boutonAnalyse.setFocusable(false);
        boutonAnalyse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boutonAnalyse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boutonAnalyse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonAnalyseActionPerformed(evt);
            }
        });
        jToolBar1.add(boutonAnalyse);

        boutonInterpretation.setText("Interpréter");
        boutonInterpretation.setActionCommand("");
        boutonInterpretation.setEnabled(false);
        boutonInterpretation.setFocusable(false);
        boutonInterpretation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boutonInterpretation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boutonInterpretation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonInterpretationActionPerformed(evt);
            }
        });
        jToolBar1.add(boutonInterpretation);

        boutonPasAPas.setText("Pas à pas");
        boutonPasAPas.setEnabled(false);
        boutonPasAPas.setFocusable(false);
        boutonPasAPas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boutonPasAPas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boutonPasAPas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonPasAPasActionPerformed(evt);
            }
        });
        jToolBar1.add(boutonPasAPas);

        analyseTexteAffichage.setColumns(20);
        analyseTexteAffichage.setRows(5);
        analyseScrollPane.setViewportView(analyseTexteAffichage);

        menuFichier.setText("Fichier");

        ouvrirMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        ouvrirMenuItem.setText("Ouvrir...");
        ouvrirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirMenuItemActionPerformed(evt);
            }
        });
        menuFichier.add(ouvrirMenuItem);

        enregistrerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        enregistrerMenuItem.setText("Enregistrer");
        enregistrerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregistrerMenuItemActionPerformed(evt);
            }
        });
        menuFichier.add(enregistrerMenuItem);

        enregisterSousMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        enregisterSousMenuItem.setText("Enregistrer sous...");
        enregisterSousMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregisterSousMenuItemActionPerformed(evt);
            }
        });
        menuFichier.add(enregisterSousMenuItem);

        menu.add(menuFichier);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(miniJajaScollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
                    .addComponent(analyseScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ongletsMemoire, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(miniJajaScollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyseScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                    .addComponent(ongletsMemoire))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ouvrirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirMenuItemActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Programme MiniJaja", "mjj");
        JFileChooser chooser = new JFileChooser();//création dun nouveau filechosser

        chooser.setFileFilter(filter);
        chooser.setApproveButtonText("Choix d'un fichier..."); //intitulé du bouton
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {

            try{
                this.miniJajaPath = chooser.getSelectedFile().getAbsolutePath();
                this.miniJajaStream  = new FileInputStream(this.miniJajaPath);
                InputStreamReader ipsr = new InputStreamReader(this.miniJajaStream);
                BufferedReader br = new BufferedReader(ipsr);
                String ligne;
                while ((ligne=br.readLine())!=null){
                    this.miniJajaText += ligne + "\n";
                }
                br.close();

                this.miniJajaSaisie.setText("");
                this.miniJajaSaisie.setText(this.miniJajaText);
            }
            catch (Exception e){
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_ouvrirMenuItemActionPerformed

    private void enregistrerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregistrerMenuItemActionPerformed
        // TODO add your handling code here:
        try{
            PrintWriter writer = new PrintWriter(this.miniJajaPath, "UTF-8");
            writer.print(this.miniJajaSaisie.getText());
            writer.close();
        }
        catch (Exception e){
            System.out.println(e.toString());
        }
        }
//GEN-LAST:event_enregistrerMenuItemActionPerformed

    private void enregisterSousMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregisterSousMenuItemActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Programme MiniJaja", "mjj");
        JFileChooser chooser = new JFileChooser();//création dun nouveau filechosser

        chooser.setFileFilter(filter);
        chooser.setApproveButtonText("Enregistrer"); //intitulé du bouton
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {

            try{
                PrintWriter writer = new PrintWriter(chooser.getSelectedFile().getAbsolutePath(), "UTF-8");
                writer.print(this.miniJajaSaisie.getText());
                writer.close();

                this.miniJajaPath = chooser.getSelectedFile().getAbsolutePath();
                this.miniJajaStream  = new FileInputStream(this.miniJajaPath);
            }
            catch (Exception e){
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_enregisterSousMenuItemActionPerformed

    private void boutonInterpretationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonInterpretationActionPerformed
        // TODO add your handling code here:
        this.ongletsMemoire.removeAll();
        Memoire memoire = new Memoire();
        MiniJajaInterpreteurVisitor visitor = new MiniJajaInterpreteurVisitor(this);
        try{
            this.threadRunning = true;
            this.arbreMiniJaja.jjtAccept(visitor, memoire);
        }catch(MiniJajaException e){
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_boutonInterpretationActionPerformed

    private void boutonAnalyseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonAnalyseActionPerformed
        // TODO add your handling code here:
        System.out.println("JavaCC Parser:  Reading from file " + this.miniJajaPath + " . . .");

       if(!this.mjjInitialiser) {
           try {
               this.mjjInitialiser = true;
               this.pasapas = false;
               this.parser = new MiniJaja(new java.io.FileInputStream(this.miniJajaPath));
           } catch (java.io.FileNotFoundException e) {
               System.out.println("JavaCC Parser:  File " + this.miniJajaPath + " not found.");
               return;
           }
       }
        else {
           try {
               parser.ReInit(new java.io.FileInputStream(this.miniJajaPath));
           }
           catch (java.io.FileNotFoundException e) {
               System.out.println("JavaCC Parser:  File " + this.miniJajaPath + " not found.");
               return;
           }
       }

        try {
            this.arbreMiniJaja = this.parser.classe();
            this.analyseTexteAffichage.setText(this.arbreMiniJaja.dump(""));
            this.boutonInterpretation.setEnabled(true);
            this.analyseTexteAffichage.append("JavaCC Parser:  Java program parsed successfully.");

        } catch (ParseException e) {
            this.analyseTexteAffichage.setText(e.getMessage());
            this.analyseTexteAffichage.append("JavaCC Parser:  Encountered errors during parse.");
        }
    }//GEN-LAST:event_boutonAnalyseActionPerformed

    private void boutonPasAPasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonPasAPasActionPerformed
        // TODO add your handling code here:
        this.ongletsMemoire.removeAll();
        Memoire memoire = new Memoire();
        MiniJajaInterpreteurVisitor visitor = new MiniJajaInterpreteurVisitor(this);
        try{
            this.pasapas = true;
            this.arbreMiniJaja.jjtAccept(visitor, memoire);
        }catch(MiniJajaException e){
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_boutonPasAPasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameMain().setVisible(true);
            }
        });
    }

    public void onMemoireChangedMain(Memoire memoire) {
        String texte = "";
        texte += memoire.toString();
        //texte += memoire.getTas().toString();
        this.ajouterOngletMemoire("Main", texte);
    }

    public void onMemoireChangedMainRetrait(Memoire memoire) {
        String texte = "";
        texte += memoire.toString();
        //texte += memoire.getTas().toString();
        this.ajouterOngletMemoire("Après retrait", texte);
    }

    public void onMemoireChangedAppelI(Memoire memoire, String nom) {
        String texte = "";
        texte += memoire.toString();
        //texte += memoire.getTas().toString();
        this.ajouterOngletMemoire(nom, texte);
    }

    public void onInstruction(Memoire memoire) {
        this.nombreInstructions++;

        if(this.pasapas) this.threadRunning = false;
        while(!this.threadRunning)
        {

        }

        System.out.println(this.nombreInstructions);
        memoire.afficherPile();
    }

    public void ajouterOngletMemoire(String nom, String texte) {
        JScrollPane nouvelOnglet = new JScrollPane();
        JTextPane texteMemoire = new JTextPane();
        nouvelOnglet.setName(nom);
        texteMemoire.setText(texte);
        nouvelOnglet.setViewportView(texteMemoire);
        this.ongletsMemoire.add(nouvelOnglet);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane analyseScrollPane;
    private javax.swing.JTextArea analyseTexteAffichage;
    private javax.swing.JButton boutonAnalyse;
    private javax.swing.JButton boutonInterpretation;
    private javax.swing.JButton boutonPasAPas;
    private javax.swing.JMenuItem enregisterSousMenuItem;
    private javax.swing.JMenuItem enregistrerMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuFichier;
    private javax.swing.JTextArea miniJajaSaisie;
    private javax.swing.JScrollPane miniJajaScollPane;
    private javax.swing.JTabbedPane ongletsMemoire;
    private javax.swing.JMenuItem ouvrirMenuItem;
    // End of variables declaration//GEN-END:variables
}
