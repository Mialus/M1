package fr.univfcomte.comp4.controle_type;

import fr.univfcomte.comp4.analyseur.*;
import fr.univfcomte.comp4.memoire.TableHachageException;

public class ControleTypeVisitor implements MiniJajaVisitor{

	public Object visit(SimpleNode node, Object data) throws MiniJajaException {
		return null;
	}

	public Object visit(ASTclasse node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		dataCT.setDeclaration(true);
		String ident = (String)node.jjtGetChild(0).jjtAccept(this, data);
		dataCT.setPorteeCourante(ident);
		node.jjtGetChild(1).jjtAccept(this, data);
		node.jjtGetChild(2).jjtAccept(this, data);
		return null;
	}

	public Object visit(ASTident node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		if (dataCT.isDeclaration()) {
			// si le nom de l'identificateur est déjà utilisé
			if (dataCT.getTableSymbole().contains((String)node.jjtGetValue())) {
				throw new MiniJajaException("Cet identificateur est déjà utilisé pour un élément");
			}
			return (String)node.jjtGetValue();
		}
		else {
			Info infoIdent;
			try {
				infoIdent = (Info)dataCT.getTableSymbole().get((String)node.jjtGetValue());
			} catch (TableHachageException e) {
				throw new MiniJajaException("Identificateur non déclaré");
			}
			if (!infoIdent.getPortee().equals(dataCT.getPorteeCourante())) {
				throw new MiniJajaException("L'identificateur"); // voir portée parent
			}
			return infoIdent.getType();
		}
		
	}

	public Object visit(ASTdecls node, Object data) throws MiniJajaException {
		node.jjtGetChild(0).jjtAccept(this, data);
		node.jjtGetChild(1).jjtAccept(this, data);
		return null;
	}

	public Object visit(ASTvnil node, Object data) throws MiniJajaException {
		return null;
	}

	public Object visit(ASTmethode node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		
		dataCT.setDeclaration(true);
		String typeMeth = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String ident = (String) node.jjtGetChild(1).jjtAccept(this, data);
		
		String porteeParent = dataCT.getPorteeCourante();
		dataCT.setPorteeCourante(ident);
		String typeEntetes = (String) node.jjtGetChild(2).jjtAccept(this, data);
		dataCT.getTableSymbole().put(ident, new Info("methode","vide",porteeParent,typeEntetes,typeMeth));
		
		node.jjtGetChild(3).jjtAccept(this, data);
		node.jjtGetChild(4).jjtAccept(this, data);
		
		dataCT.setPorteeCourante(porteeParent);
		
		return null;
	}

	public Object visit(ASTtableau node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		
		String typeIdent = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String ident = (String) node.jjtGetChild(1).jjtAccept(this, data);
		dataCT.setDeclaration(false);
		String typeExp = (String) node.jjtGetChild(2).jjtAccept(this, data);
		
		if(!typeExp.equals("entier"))
		{
			throw new MiniJajaException("la taille du tableau doit être un entier");
		}
		
		dataCT.getTableSymbole().put(ident, new Info("tableau",typeIdent,dataCT.getPorteeCourante()));
		
		return null;
	}

	public Object visit(ASTvar node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		
		String typeIdent = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String ident = (String) node.jjtGetChild(1).jjtAccept(this, data);
		dataCT.setDeclaration(false);
		String typeValeur = (String) node.jjtGetChild(2).jjtAccept(this, data);
		
		if(!typeIdent.equals(typeValeur) && !typeValeur.equals("omega"))
		{
			throw new MiniJajaException("var");
		}
		
		dataCT.getTableSymbole().put(ident, new Info("var",typeIdent,dataCT.getPorteeCourante()));
		
		return null;
	}

	public Object visit(ASTcst node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		
		String typeIdent = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String ident = (String) node.jjtGetChild(1).jjtAccept(this, data);
		dataCT.setDeclaration(false);
		String typeValeur = (String) node.jjtGetChild(2).jjtAccept(this, data);
		
		if(!typeIdent.equals(typeValeur) && !typeValeur.equals("omega"))
		{
			throw new MiniJajaException("cst");
		}
		
		dataCT.getTableSymbole().put(ident, new Info("cst",typeIdent,dataCT.getPorteeCourante()));
		
		return null;
	}

	public Object visit(ASTvars node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		dataCT.setDeclaration(true);
		node.jjtGetChild(0).jjtAccept(this, data);
		node.jjtGetChild(1).jjtAccept(this, data);
		return null;
	}

	public Object visit(ASTomega node, Object data) throws MiniJajaException {
		return "omega";
	}

	public Object visit(ASTmain node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		String porteeParent = dataCT.getPorteeCourante();
		dataCT.setPorteeCourante("main");
		node.jjtGetChild(0).jjtAccept(this, data);
		node.jjtGetChild(1).jjtAccept(this, data);
		dataCT.setPorteeCourante(porteeParent);
		return null;
	}

	public Object visit(ASTenil node, Object data) throws MiniJajaException {
		return "vide";
	}

	public Object visit(ASTentetes node, Object data) throws MiniJajaException {
		String typeEntete1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeEntete2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if (typeEntete2.equals("vide")) {
			return typeEntete1;
		}
		else {
			return typeEntete1+"X"+typeEntete2;
		}
	}

	public Object visit(ASTentete node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		
		String type = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String ident = (String) node.jjtGetChild(1).jjtAccept(this, data);
		
		// ajouter les variables entete
		dataCT.getTableSymbole().put(ident, new Info("var",type,dataCT.getPorteeCourante()));
		
		return type;
	}

	public Object visit(ASTinstrs node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		dataCT.setDeclaration(false);
		node.jjtGetChild(0).jjtAccept(this, data);
		node.jjtGetChild(1).jjtAccept(this, data);
		return null;
	}

	public Object visit(ASTinil node, Object data) throws MiniJajaException {
		return null;
	}

	public Object visit(ASTtab node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;
		
		dataCT.setDeclaration(false);
		String ident = (String) node.jjtGetChild(0).jjtAccept(this, data);
		// verifie si l'ident existe dans la table des symboles
		if (!dataCT.getTableSymbole().contains(ident)) {
			throw new MiniJajaException("tableau non défini");
		}
		
		String typeExp = (String) node.jjtGetChild(1).jjtAccept(this, data);
		Info infoTableau;
		try {
			infoTableau = (Info)dataCT.getTableSymbole().get(ident);
		} catch (TableHachageException e) {
			throw new MiniJajaException("tableau non défini");
		}
		
		// verifie si l'ident est bien un tableau
		if (!infoTableau.getGenre().equals("tableau")) {
			throw new MiniJajaException("l'ident ne représente pas un tableau");
		}
		
		if (!typeExp.equals("entier")) {
			throw new MiniJajaException("l'indice du tableau doit correspondre à un entier");
		}
		
		return null;
	}

	public Object visit(ASTaffectation node, Object data) throws MiniJajaException {
		String typeIdent = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if (!typeIdent.equals(typeExp)) {
			throw new MiniJajaException("l'ident et l'expression sont incompatibles");
		}
		return null;
	}

	public Object visit(ASTsomme node, Object data) throws MiniJajaException {
		String typeIdent = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if (!typeIdent.equals("entier")) {
			throw new MiniJajaException("l'ident doit être un entier");
		}
		else if (!typeExp.equals("entier")) {
			throw new MiniJajaException("l'expression doit être un entier");
		}
		return null;
	}

	public Object visit(ASTincrement node, Object data) throws MiniJajaException {
		String typeIdent = (String) node.jjtGetChild(0).jjtAccept(this, data);
		if (!typeIdent.equals("entier")) {
			throw new MiniJajaException("la variable doit être un entier");
		}
		return null;
	}

	public Object visit(ASTappelI node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;

		String ident = (String) node.jjtGetChild(0).jjtAccept(this, data);
		// verifie si l'ident existe dans la table des symboles
		if (!dataCT.getTableSymbole().contains(ident)) {
			throw new MiniJajaException("méthode non définie");
		}
		
		String typeListExp = (String) node.jjtGetChild(1).jjtAccept(this, data);
		Info infoMethode;
		try {
			infoMethode = (Info)dataCT.getTableSymbole().get(ident);
		} catch (TableHachageException e) {
			throw new MiniJajaException("méthode non définie");
		}
		
		// verifie si l'ident est bien une methode
		if (!infoMethode.getGenre().equals("methode")) {
			throw new MiniJajaException("l'ident ne représente pas une méthode");
		}
		
		// verifie le bon nombre d arguments et le bon typage de ceux-ci avec les entetes
		if (!infoMethode.getTypeEntetes().equals(typeListExp)) {
			throw new MiniJajaException("erreur sur le nombre d'arguments ou le typage de ceux-ci");
		}
		
		return null;
	}

	public Object visit(ASTretour node, Object data) throws MiniJajaException {
		DataControleType dataCT = (DataControleType)data;

		// vérifier que l'on retourne bien le type de retour de la methode
		String typeExp = (String) node.jjtGetChild(0).jjtAccept(this, data);
		Info infoMethode;
		try {
			// on peut peut-être ajouter un attribut mathodeCourante dans Info
			// si on étend la portée avec les while et les if
			infoMethode = (Info)dataCT.getTableSymbole().get(dataCT.getPorteeCourante());
		} catch (TableHachageException e) {
			throw new MiniJajaException ("methode non declarée");
		}
		
		if (!infoMethode.getTypeRetour().equals(typeExp)) {
			throw new MiniJajaException ("type de retour non compatible");
		}
		return null;
	}

	public Object visit(ASTsi node, Object data) throws MiniJajaException {
		String typeExp = (String) node.jjtGetChild(0).jjtAccept(this, data);
		if (!typeExp.equals("booleen")) {
			throw new MiniJajaException ("l'expression du si doit être un booléen");
		}
		
		node.jjtGetChild(1).jjtAccept(this, data);
		node.jjtGetChild(2).jjtAccept(this, data);
		return null;
	}

	public Object visit(ASTtantque node, Object data) throws MiniJajaException {
		String typeExp = (String) node.jjtGetChild(0).jjtAccept(this, data);
		if (!typeExp.equals("booleen")) {
			throw new MiniJajaException ("l'expression du tant que doit être un booléen");
		}
		
		node.jjtGetChild(1).jjtAccept(this, data);
		return null;
	}

	public Object visit(ASTexnil node, Object data) throws MiniJajaException {
		return "vide";
	}

	public Object visit(ASTlistexp node, Object data) throws MiniJajaException {
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if (typeExp2.equals("vide")) {
			return typeExp1;
		}
		else {
			return typeExp1+"X"+typeExp2;
		}
	}

	public Object visit(ASTnot node, Object data) throws MiniJajaException {
		String typeExp = (String) node.jjtGetChild(0).jjtAccept(this, data);
		if(!typeExp.equals("bool"))
		{
			throw new MiniJajaException("not");
		}
		return "booleen";
	}

	public Object visit(ASTet node, Object data) throws MiniJajaException {
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals("bool") || !typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException("et");
		}
		return "booleen";
	}

	public Object visit(ASTou node, Object data) throws MiniJajaException {
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals("bool") || !typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException("ou");
		}
		return "booleen";
	}

	public Object visit(ASTegal node, Object data) throws MiniJajaException{
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException("==");
		}
		return "booleen";
	}

	public Object visit(ASTsupga node, Object data) throws MiniJajaException{
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals("entier") || !typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException(">");
		}
		return "booleen";
	}

	public Object visit(ASTmoinsU node, Object data) throws MiniJajaException{
		String typeExp = (String) node.jjtGetChild(0).jjtAccept(this, data);
		if(!typeExp.equals("entier"))
		{
			throw new MiniJajaException("moinsU");
		}
		return "entier";
	}

	public Object visit(ASTplus node, Object data) throws MiniJajaException{
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals("entier") || !typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException("plus");
		}
		return "entier";
	}

	public Object visit(ASTmoinsB node, Object data) throws MiniJajaException{
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals("entier") || !typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException("moinsB");
		}
		return "entier";
	}

	public Object visit(ASTmult node, Object data) throws MiniJajaException{
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals("entier") || !typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException("mult");
		}
		return "entier";
	}

	public Object visit(ASTdiv node, Object data) throws MiniJajaException{
		String typeExp1 = (String) node.jjtGetChild(0).jjtAccept(this, data);
		String typeExp2 = (String) node.jjtGetChild(1).jjtAccept(this, data);
		if(!typeExp1.equals("entier") || !typeExp1.equals(typeExp2))
		{
			throw new MiniJajaException("div");
		}
		return "entier";
	}

	public Object visit(ASTvrai node, Object data) throws MiniJajaException{
		return "booleen";
	}

	public Object visit(ASTfaux node, Object data) throws MiniJajaException{
		return "booleen";
	}

	public Object visit(ASTappelE node, Object data) throws MiniJajaException{
		DataControleType dataCT = (DataControleType)data;
		
		String ident = (String) node.jjtGetChild(0).jjtAccept(this, data);
		// verifie si l'ident existe dans la table des symboles
		if (!dataCT.getTableSymbole().contains(ident)) {
			throw new MiniJajaException("méthode non définie");
		}
		
		String typeListExp = (String) node.jjtGetChild(1).jjtAccept(this, data);
		Info infoMethode;
		try {
			infoMethode = (Info)dataCT.getTableSymbole().get(ident);
		} catch (TableHachageException e) {
			throw new MiniJajaException("méthode non définie");
		}
		
		// verifie si l'ident est bien une methode
		if (!infoMethode.getGenre().equals("methode")) {
			throw new MiniJajaException("l'ident ne représente pas une méthode");
		}
		
		// verifie le bon nombre d arguments et le bon typage de ceux-ci avec les entetes
		if (!infoMethode.getTypeEntetes().equals(typeListExp)) {
			throw new MiniJajaException("erreur sur le nombre d'arguments ou le typage de ceux-ci");
		}
		
		// retourne le type de retour de la methode
		return infoMethode.getTypeEntetes();
	}

	public Object visit(ASTnbre node, Object data) throws MiniJajaException{
		return "entier";
	}

	public Object visit(ASTrien node, Object data) throws MiniJajaException{
		return "vide";
	}

	public Object visit(ASTentier node, Object data) throws MiniJajaException{
		return "entier";
	}

	public Object visit(ASTbooleen node, Object data) throws MiniJajaException{
		return "booleen";
	}

}
