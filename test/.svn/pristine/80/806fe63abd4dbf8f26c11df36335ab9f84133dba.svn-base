package fr.univfcomte.comp4.interpreteur_MiniJaja;
import fr.univfcomte.comp4.analyseur.*;
import fr.univfcomte.comp4.memoire.*;

public class MiniJajaInterpreteurVisitor implements MiniJajaVisitor{

	public Object visit(SimpleNode node, Object data) throws MiniJajaException {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(ASTclasse node, Object data) throws MiniJajaException {
		String nom = (String) ((SimpleNode)node.jjtGetChild(0)).jjtGetValue();
		((Memoire)data).declVar(nom, new Omega(), new SortOmega());
		node.jjtGetChild(1).jjtAccept(this, data);
		node.jjtGetChild(2).jjtAccept(this, data);
		System.out.println("_____________\nFin traitement :\n");
		((Memoire)data).afficherPile();
		((Memoire)data).afficherTas();
		MiniJajaRetraitVisitor visiteurR = new MiniJajaRetraitVisitor();
		((SimpleNode)node).jjtAccept(visiteurR, data);
		System.out.println("_____________\nApr√®s retrait :\n");
		((Memoire)data).afficherPile();
		((Memoire)data).afficherTas();
		return null;
	}

	public Object visit(ASTident node, Object data) throws MiniJajaException {
		Valeur valeur = ((Memoire)data).val(node.jjtGetValue().toString());
		return valeur;
	}

	public Object visit(ASTdecls node, Object data) throws MiniJajaException {
		for(int i =0; i<node.jjtGetNumChildren(); i++)
		{
			node.jjtGetChild(i).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTvnil node, Object data) throws MiniJajaException {
		return null;
	}

	public Object visit(ASTmethode node, Object data) throws MiniJajaException {
		Sorte type =(Sorte) ((SimpleNode)node.jjtGetChild(0)).jjtAccept(this, data);
		String nom = (String) ((SimpleNode)node.jjtGetChild(1)).jjtGetValue();
		Valeur valeur =new ValeurMethode(node);
		((Memoire)data).declMeth(nom, valeur, type);
		return null;
	}

	public Object visit(ASTtableau node, Object data) throws MiniJajaException {
		Sorte type =(Sorte) ((SimpleNode)node.jjtGetChild(0)).jjtAccept(this, data);
		String nom = (String) ((SimpleNode)node.jjtGetChild(1)).jjtGetValue();
		Valeur valeur =(Valeur) ((SimpleNode)node.jjtGetChild(2)).jjtAccept(this, data);
		((Memoire)data).declTab(nom, valeur, type);
		return null;
	}

	public Object visit(ASTvar node, Object data) throws MiniJajaException {
		Sorte type =(Sorte) ((SimpleNode)node.jjtGetChild(0)).jjtAccept(this, data);
		String nom = (String) ((SimpleNode)node.jjtGetChild(1)).jjtGetValue();
		Valeur valeur =(Valeur) ((SimpleNode)node.jjtGetChild(2)).jjtAccept(this, data);
		((Memoire)data).declVar(nom, valeur, type);
		return null;
	}

	public Object visit(ASTcst node, Object data) throws MiniJajaException {
		Sorte type =(Sorte) ((SimpleNode)node.jjtGetChild(0)).jjtAccept(this, data);
		String nom = (String) ((SimpleNode)node.jjtGetChild(1)).jjtGetValue();
		Valeur valeur =(Valeur) ((SimpleNode)node.jjtGetChild(2)).jjtAccept(this, data);
		((Memoire)data).declCst(nom, valeur, type);
		return null;
	}

	public Object visit(ASTvars node, Object data) throws MiniJajaException {
		for(int i =0; i<node.jjtGetNumChildren(); i++)
		{
			node.jjtGetChild(i).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTomega node, Object data) throws MiniJajaException {
		return new Omega();
	}

	public Object visit(ASTmain node, Object data) throws MiniJajaException {
		for(int i =0; i<node.jjtGetNumChildren(); i++)
		{
			node.jjtGetChild(i).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTenil node, Object data) throws MiniJajaException {
		return null;
	}

	public Object visit(ASTentetes node, Object data) throws MiniJajaException {
		for(int i =0; i<node.jjtGetNumChildren(); i++)
		{
			node.jjtGetChild(i).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTentete node, Object data) throws MiniJajaException {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(ASTinstrs node, Object data) throws MiniJajaException {
		for(int i =0; i<node.jjtGetNumChildren(); i++)
		{
			node.jjtGetChild(i).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTinil node, Object data) throws MiniJajaException {
		return null;
	}

	public Object visit(ASTtab node, Object data) throws MiniJajaException {
		String nom = (String) ((SimpleNode)node.jjtGetChild(0)).jjtGetValue();
		Valeur valeur = (ValeurEntier) ((SimpleNode)node.jjtGetChild(1)).jjtAccept(this, data);
		return ((Memoire)data).valT(nom, (Integer) valeur.getVal());
	}

	public Object visit(ASTaffectation node, Object data) throws MiniJajaException {
		String nom="";
		SimpleNode fils1 =(SimpleNode) node.jjtGetChild(0);
		if( fils1 instanceof ASTident)
		{
			nom = (String) fils1.jjtGetValue();
			Valeur valeur = (Valeur) ((SimpleNode)node.jjtGetChild(1)).jjtAccept(this, data);
			((Memoire)data).affecterVal(nom, valeur);
		}
		
		if(fils1 instanceof ASTtab)
		{
			nom =(String) ((SimpleNode)fils1.jjtGetChild(0)).jjtGetValue();
			ValeurTab tab =(ValeurTab) ((Memoire)data).val(nom);
			Valeur indice =(ValeurEntier) ((SimpleNode)fils1.jjtGetChild(1)).jjtAccept(this, data);
			Valeur valeur = (ValeurEntier) ((SimpleNode)node.jjtGetChild(1)).jjtAccept(this, data);
			((Memoire)data).affecterValT(tab, valeur, indice);
		}
		return null;
	}

	public Object visit(ASTsomme node, Object data) throws MiniJajaException {
		String nom="";
		SimpleNode fils1 =(SimpleNode) node.jjtGetChild(0);
		if( fils1 instanceof ASTident)
		{
			nom = (String) fils1.jjtGetValue();
			Valeur valeur1 = ((Memoire)data).val(nom);
			Valeur valeur2 = (Valeur) ((SimpleNode)node.jjtGetChild(1)).jjtAccept(this, data);
			Valeur somme = new ValeurEntier((Integer)valeur1.getVal() + (Integer)valeur2.getVal());
			((Memoire)data).affecterVal(nom,somme);
		}
		
		if(fils1 instanceof ASTtab)
		{
			nom =(String) ((SimpleNode)fils1.jjtGetChild(0)).jjtGetValue();
			ValeurTab tab =(ValeurTab) ((Memoire)data).val(nom);
			Valeur indice =(ValeurEntier) ((SimpleNode)fils1.jjtGetChild(1)).jjtAccept(this, data);
			Valeur valeur1 = (Valeur) fils1.jjtAccept(this, data);
			Valeur valeur2 = (ValeurEntier) ((SimpleNode)node.jjtGetChild(1)).jjtAccept(this, data);
			Valeur somme = new ValeurEntier((Integer)valeur1.getVal() + (Integer)valeur2.getVal());
			((Memoire)data).affecterValT(tab,somme, indice);
		}
		return null;
	}

	public Object visit(ASTincrement node, Object data) throws MiniJajaException {
		String nom="";
		SimpleNode fils1 =(SimpleNode) node.jjtGetChild(0);
		if( fils1 instanceof ASTident)
		{
			nom = (String) fils1.jjtGetValue();
			Valeur valeur1 = ((Memoire)data).val(nom);
			Valeur somme = new ValeurEntier((Integer)valeur1.getVal() + 1);
			((Memoire)data).affecterVal(nom,somme);
		}
		
		if(fils1 instanceof ASTtab)
		{
			nom =(String) ((SimpleNode)fils1.jjtGetChild(0)).jjtGetValue();
			ValeurTab tab =(ValeurTab) ((Memoire)data).val(nom);
			Valeur indice =(ValeurEntier) ((SimpleNode)fils1.jjtGetChild(1)).jjtAccept(this, data);
			Valeur valeur1 = (Valeur) fils1.jjtAccept(this, data);
			Valeur somme = new ValeurEntier((Integer)valeur1.getVal() + 1);
			((Memoire)data).affecterValT(tab,somme, indice);
		}
		return null;
	}

	public Object visit(ASTappelI node, Object data) throws MiniJajaException {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(ASTretour node, Object data) throws MiniJajaException {
		Valeur valeur = (Valeur) ((SimpleNode)node.jjtGetChild(0)).jjtAccept(this, data);
		((Memoire)data).affecterVariableClasse(valeur);
		return null;
	}

	public Object visit(ASTsi node, Object data) throws MiniJajaException {
		boolean condition =(Boolean) ((ValeurBooleen)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		if(condition)
		{
			((SimpleNode)node.jjtGetChild(1)).jjtAccept(this, data);
		}else
		{
			((SimpleNode)node.jjtGetChild(2)).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTtantque node, Object data) throws MiniJajaException {
		boolean condition =(Boolean) ((ValeurBooleen)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		if(condition)
		{
			((SimpleNode)node.jjtGetChild(1)).jjtAccept(this, data);
			((SimpleNode)node).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTexnil node, Object data) throws MiniJajaException {
		return null;
	}

	public Object visit(ASTlistexp node, Object data) throws MiniJajaException {
		for(int i =0; i<node.jjtGetNumChildren(); i++)
		{
			node.jjtGetChild(i).jjtAccept(this, data);
		}
		return null;
	}

	public Object visit(ASTnot node, Object data) throws MiniJajaException {
		boolean f1 =(Boolean) ((ValeurBooleen)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		return new ValeurBooleen(!f1);
	}

	public Object visit(ASTet node, Object data) throws MiniJajaException {
		boolean f1 =(Boolean) ((ValeurBooleen)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		boolean f2 =(Boolean) ((ValeurBooleen)(node.jjtGetChild(1)).jjtAccept(this, data)).getVal();
		return new ValeurBooleen((f1 && f2));
	}

	public Object visit(ASTou node, Object data) throws MiniJajaException {
		boolean f1 =(Boolean) ((ValeurBooleen)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		boolean f2 =(Boolean) ((ValeurBooleen)(node.jjtGetChild(1)).jjtAccept(this, data)).getVal();
		return new ValeurBooleen((f1 || f2));
	}

	public Object visit(ASTegal node, Object data) throws MiniJajaException {
		Valeur f1 =(Valeur)(node.jjtGetChild(0)).jjtAccept(this, data);
		Valeur f2 =(Valeur)(node.jjtGetChild(1)).jjtAccept(this, data);
		return new ValeurBooleen(((f1.getVal()) == (f2.getVal())));
	}

	public Object visit(ASTsupga node, Object data) throws MiniJajaException {
		int f1 =(Integer) ((ValeurEntier)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		int f2 =(Integer) ((ValeurEntier)(node.jjtGetChild(1)).jjtAccept(this, data)).getVal();
		return new ValeurBooleen((f1>f2));
	}

	public Object visit(ASTmoinsU node, Object data) throws MiniJajaException {
		int f1 =(Integer) ((ValeurEntier)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		return new ValeurEntier(-f1);
	}

	public Object visit(ASTplus node, Object data) throws MiniJajaException {
		int f1 =(Integer) ((ValeurEntier)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		int f2 =(Integer) ((ValeurEntier)(node.jjtGetChild(1)).jjtAccept(this, data)).getVal();
		return new ValeurEntier((f1+f2));
	}

	public Object visit(ASTmoinsB node, Object data) throws MiniJajaException {
		int f1 =(Integer) ((ValeurEntier)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		int f2 =(Integer) ((ValeurEntier)(node.jjtGetChild(1)).jjtAccept(this, data)).getVal();
		return new ValeurEntier((f1-f2));
	}

	public Object visit(ASTmult node, Object data) throws MiniJajaException {
		int f1 =(Integer) ((ValeurEntier)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		int f2 =(Integer) ((ValeurEntier)(node.jjtGetChild(1)).jjtAccept(this, data)).getVal();
		return new ValeurEntier((f1*f2));
	}

	public Object visit(ASTdiv node, Object data) throws MiniJajaException {
		int f1 =(Integer) ((ValeurEntier)(node.jjtGetChild(0)).jjtAccept(this, data)).getVal();
		int f2 =(Integer) ((ValeurEntier)(node.jjtGetChild(1)).jjtAccept(this, data)).getVal();
		if(f2 == 0)
		{
			throw new MiniJajaException("Division par 0");
		}
		return new ValeurEntier(f1/f2);
	}

	public Object visit(ASTvrai node, Object data) throws MiniJajaException {
		return new ValeurBooleen(true);
	}

	public Object visit(ASTfaux node, Object data) throws MiniJajaException {
		return new ValeurBooleen(false);
	}

	public Object visit(ASTappelE node, Object data) throws MiniJajaException {
		// TODO Auto-generated method stub
		return null;
	}

	public Object visit(ASTnbre node, Object data) throws MiniJajaException {
		return new ValeurEntier(Integer.parseInt((String)node.jjtGetValue()));
	}

	public Object visit(ASTrien node, Object data) throws MiniJajaException {
		return new SortVide();
	}

	public Object visit(ASTentier node, Object data) throws MiniJajaException {
		return new SortInt();
	}

	public Object visit(ASTbooleen node, Object data) throws MiniJajaException {
		return new SortBooleen();
	}

}
