/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.univfcomte.comp4.guid;

import fr.univfcomte.comp4.analyseur.MiniJaja;
import fr.univfcomte.comp4.analyseur.ParseException;
import fr.univfcomte.comp4.analyseur.SimpleNode;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.*;

/**
 *
 * @author f2e
 */
public class JFrameMain extends javax.swing.JFrame {

    private String miniJajaText;
    private InputStream miniJajaStream;
    private MiniJaja parser;
    private String miniJajaPath;
    private boolean mjjInitialiser;

    /**
     * Creates new form JFrameMain
     */
    public JFrameMain() {
        this.miniJajaText = "";
        this.mjjInitialiser = false;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        miniJajaScollPane = new javax.swing.JScrollPane();
        mjjTextArea = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        ButtonAnalyse = new javax.swing.JToggleButton();
        analyseScrollPane = new javax.swing.JScrollPane();
        analyseTextArea = new javax.swing.JTextArea();
        menu = new javax.swing.JMenuBar();
        menuFichier = new javax.swing.JMenu();
        ouvrirMenuItem = new javax.swing.JMenuItem();
        enregistrerMenuItem = new javax.swing.JMenuItem();
        enregisterSousMenuItem = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu5.setText("jMenu5");

        jMenu6.setText("jMenu6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mjjTextArea.setColumns(20);
        mjjTextArea.setRows(5);
        mjjTextArea.setTabSize(3);
        mjjTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        mjjTextArea.setDragEnabled(true);
        miniJajaScollPane.setViewportView(mjjTextArea);

        jToolBar1.setRollover(true);

        ButtonAnalyse.setText("Analyser");
        ButtonAnalyse.setFocusable(false);
        ButtonAnalyse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonAnalyse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonAnalyse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAnalyseActionPerformed(evt);
            }
        });
        jToolBar1.add(ButtonAnalyse);

        analyseTextArea.setColumns(20);
        analyseTextArea.setRows(5);
        analyseScrollPane.setViewportView(analyseTextArea);

        menuFichier.setText("Fichier");

        ouvrirMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        ouvrirMenuItem.setText("Ouvrir...");
        ouvrirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirMenuItemActionPerformed(evt);
            }
        });
        menuFichier.add(ouvrirMenuItem);

        enregistrerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        enregistrerMenuItem.setText("Enregistrer");
        enregistrerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregistrerMenuItemActionPerformed(evt);
            }
        });
        menuFichier.add(enregistrerMenuItem);

        enregisterSousMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        enregisterSousMenuItem.setText("Enregistrer sous...");
        enregisterSousMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregisterSousMenuItemActionPerformed(evt);
            }
        });
        menuFichier.add(enregisterSousMenuItem);

        menu.add(menuFichier);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(analyseScrollPane)
                    .addComponent(miniJajaScollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1404, Short.MAX_VALUE))
                .addGap(0, 233, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(miniJajaScollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyseScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ouvrirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirMenuItemActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Programme MiniJaja", "mjj");
        JFileChooser chooser = new JFileChooser();//création dun nouveau filechosser

        chooser.setFileFilter(filter);
        chooser.setApproveButtonText("Choix d'un fichier..."); //intitulé du bouton
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {

            try{
                this.miniJajaPath = chooser.getSelectedFile().getAbsolutePath();
                this.miniJajaStream  = new FileInputStream(this.miniJajaPath);
                InputStreamReader ipsr = new InputStreamReader(this.miniJajaStream);
                BufferedReader br = new BufferedReader(ipsr);
                String ligne;
                while ((ligne=br.readLine())!=null){
                    this.miniJajaText += ligne + "\n";
                }
                br.close();

                this.mjjTextArea.setText(this.miniJajaText);
            }
            catch (Exception e){
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_ouvrirMenuItemActionPerformed

    private void ButtonAnalyseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAnalyseActionPerformed
        // TODO add your handling code here:


        System.out.println("JavaCC Parser:  Reading from file " + this.miniJajaPath + " . . .");

       if(!this.mjjInitialiser) {
           try {
               this.parser = new MiniJaja(new java.io.FileInputStream(this.miniJajaPath));
               this.mjjInitialiser = true;
           } catch (java.io.FileNotFoundException e) {
               System.out.println("JavaCC Parser:  File " + this.miniJajaPath + " not found.");
               return;
           }
       }
        else {
           try {
               parser.ReInit(new java.io.FileInputStream(this.miniJajaPath));
           }
           catch (java.io.FileNotFoundException e) {
               System.out.println("JavaCC Parser:  File " + this.miniJajaPath + " not found.");
               return;
           }
       }

        try {
            SimpleNode n = this.parser.classe();
            analyseTextArea.setText(n.dump(""));
            analyseTextArea.append("JavaCC Parser:  Java program parsed successfully.");

        } catch (ParseException e) {
            analyseTextArea.setText(e.getMessage());
            analyseTextArea.append("JavaCC Parser:  Encountered errors during parse.");
        }
    }//GEN-LAST:event_ButtonAnalyseActionPerformed

    private void enregistrerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregistrerMenuItemActionPerformed
        // TODO add your handling code here:
        try{
            PrintWriter writer = new PrintWriter(this.miniJajaPath, "UTF-8");
            writer.print(this.mjjTextArea.getText());
            writer.close();
        }
        catch (Exception e){
            System.out.println(e.toString());
        }
        }
//GEN-LAST:event_enregistrerMenuItemActionPerformed

    private void enregisterSousMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregisterSousMenuItemActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Programme MiniJaja", "mjj");
        JFileChooser chooser = new JFileChooser();//création dun nouveau filechosser

        chooser.setFileFilter(filter);
        chooser.setApproveButtonText("Enregistrer"); //intitulé du bouton
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {

            try{
                PrintWriter writer = new PrintWriter(chooser.getSelectedFile().getAbsolutePath(), "UTF-8");
                writer.print(this.mjjTextArea.getText());
                writer.close();

                this.miniJajaPath = chooser.getSelectedFile().getAbsolutePath();
                this.miniJajaStream  = new FileInputStream(this.miniJajaPath);
            }
            catch (Exception e){
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_enregisterSousMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ButtonAnalyse;
    private javax.swing.JScrollPane analyseScrollPane;
    private javax.swing.JTextArea analyseTextArea;
    private javax.swing.JMenuItem enregisterSousMenuItem;
    private javax.swing.JMenuItem enregistrerMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuFichier;
    private javax.swing.JScrollPane miniJajaScollPane;
    private javax.swing.JTextArea mjjTextArea;
    private javax.swing.JMenuItem ouvrirMenuItem;
    // End of variables declaration//GEN-END:variables
}
