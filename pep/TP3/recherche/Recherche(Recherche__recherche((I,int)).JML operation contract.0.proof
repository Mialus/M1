\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 05 08:47:10 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Tue Apr 05 08:47:10 CEST 2016
name=Recherche[Recherche\\:\\:recherche([I,int)].JML operation contract.0
contract=Recherche[Recherche\\:\\:recherche([I,int)].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Pierre" ) (keyVersion "f29c982fc6c75827991e94a2a905e3419d01d6ee"))

(autoModeTime "399")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "translateJavaUnaryMinusInt" (formula "1") (term "1,1,1,1,0,0,1,1"))
(rule "neg_literal" (formula "1") (term "1,1,1,1,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,1,1,0,0,1"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,0,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0,1,1,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,1,0,0,1"))
(rule "nnf_imp2or" (formula "6") (term "0,0,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "6") (term "0,0,0,1,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,1,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,1,1,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,1,1,0,0,1"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,0,0,1,1,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0,0,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,1,1,0,0,1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_recherche,savedHeapBefore_recherche,_tBefore_recherche,_xBefore_recherche"))
(builtin "One Step Simplification" (formula "6"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "i"))
(rule "for_to_while" (formula "6") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(builtin "Loop Invariant" (formula "6") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
   (rule "qeq_literals" (formula "6") (term "0,0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0,1"))
   (rule "add_literals" (formula "6") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1"))
   (rule "mul_literals" (formula "6") (term "1,1,0,0,1"))
   (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "4"))
   (rule "leq_literals" (formula "6") (term "0,0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "allRight" (formula "6") (inst "sk=j_1"))
   (rule "impRight" (formula "6"))
   (rule "andLeft" (formula "1"))
   (rule "notRight" (formula "8"))
   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
   (rule "qeq_literals" (formula "2") (term "0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "8") (term "0,1,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "8") (term "0,1,1,1,0,1"))
   (rule "andLeft" (formula "6"))
   (rule "impRight" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "rtrn"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "returnExpr"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "11") (term "1,0,0,1"))
   (rule "blockReturn" (formula "11") (term "1,0,1,0,1"))
   (rule "blockThrow" (formula "11") (term "1,0,0,1"))
   (rule "blockReturn" (formula "11") (term "1,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "boxToDiamond" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "11") (term "0,1,0,0,1,1,1,0,1"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "compound_less_than_comparison_2" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_3"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_4"))
   (rule "assignment_read_length" (formula "9"))
   (branch "Normal Execution (_t != null)"
      (builtin "One Step Simplification" (formula "9"))
      (rule "less_than_comparison_simple" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "qeq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "5") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
      (rule "leq_literals" (formula "5") (term "0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "arrayLengthIsAShort" (formula "5") (term "0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_5"))
      (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v1=x_7") (inst "#v0=x_6"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_6"))
      (rule "assignment" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_7"))
      (rule "assignment_read_length" (formula "10"))
      (branch "Normal Execution (_t != null)"
         (builtin "One Step Simplification" (formula "10"))
         (rule "less_than_comparison_simple" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,0,1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "ifSplit" (formula "10"))
         (branch "if x_5 true"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_8"))
            (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=x_9"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_9"))
            (rule "assignment_array2" (formula "10"))
            (branch "Normal Execution (_t != null)"
               (builtin "One Step Simplification" (formula "10"))
               (rule "pullOutSelect" (formula "10") (term "0,1,0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "11") (term "0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "equality_comparison_simple" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "ifSplit" (formula "10"))
               (branch "if x_8 true"
                  (builtin "One Step Simplification" (formula "11"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "blockBreakNoLabel" (formula "11") (term "1"))
                  (rule "blockBreakLabel" (formula "11") (term "1"))
                  (rule "blockEmpty" (formula "11") (term "1"))
                  (rule "tryEmpty" (formula "11") (term "1"))
                  (rule "methodCallEmpty" (formula "11") (term "1"))
                  (rule "emptyModality" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "methodCallReturn" (formula "11") (term "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "methodCallEmpty" (formula "11") (term "1"))
                  (rule "tryEmpty" (formula "11") (term "1"))
                  (rule "emptyModality" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "8")) (ifInst ""  (formula "2")))
                  (rule "replaceKnownSelect_taclet00001_0" (formula "11") (term "0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00001_1" (formula "11") (term "0,0"))
                  (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "1") (ifseqformula "8"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1"))
                  (rule "mul_literals" (formula "11") (term "0,0,1"))
                  (rule "leq_literals" (formula "11") (term "0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "notRight" (formula "11"))
                  (rule "allLeft" (formula "1") (inst "t=i_0"))
                  (rule "replaceKnownSelect_taclet00001_0" (formula "1") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00001_1" (formula "1") (term "0,0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "leq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_8 false"
                  (builtin "One Step Simplification" (formula "11"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "blockEmpty" (formula "11") (term "1"))
                  (rule "postincrement" (formula "11") (term "1"))
                  (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_10"))
                  (rule "remove_parentheses_right" (formula "11") (term "1"))
                  (rule "assignmentAdditionInt" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
                  (rule "unusedLabel" (formula "11") (term "1"))
                  (rule "widening_identity_cast_5" (formula "11") (term "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "tryEmpty" (formula "11") (term "1"))
                  (rule "methodCallEmpty" (formula "11") (term "1"))
                  (rule "emptyModality" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
                  (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,0,1"))
                  (rule "mul_literals" (formula "11") (term "0,0,0,1"))
                  (rule "precOfInt" (formula "11") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,1"))
                  (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,1,1"))
                  (rule "add_literals" (formula "11") (term "1,1,0,1,1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,1,1"))
                  (rule "add_zero_right" (formula "11") (term "0,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,1"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1"))
                  (rule "add_literals" (formula "11") (term "1,0,1,1"))
                  (rule "times_zero_1" (formula "11") (term "0,1,1"))
                  (rule "leq_literals" (formula "11") (term "1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "1,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1"))
                  (rule "mul_literals" (formula "11") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1"))
                  (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "7"))
                  (rule "leq_literals" (formula "11") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "andRight" (formula "11"))
                  (branch "Case 1"
                     (rule "allRight" (formula "11") (inst "sk=j_0"))
                     (rule "orRight" (formula "11"))
                     (rule "orRight" (formula "11"))
                     (rule "notRight" (formula "13"))
                     (rule "inEqSimp_geqRight" (formula "13"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "13"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfAnon" (formula "3"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "14")) (ifInst ""  (formula "7")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "allLeft" (formula "11") (inst "t=j_0"))
                     (rule "replaceKnownSelect_taclet0100001_2" (formula "11") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0100001_3" (formula "11") (term "0,0,1"))
                     (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "11") (term "0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "2"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,0"))
                     (rule "times_zero_1" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "11"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,0"))
                     (rule "times_zero_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                     (rule "applyEqRigid" (formula "1") (term "0,2,0") (ifseqformula "9"))
                     (rule "close" (formula "11") (ifseqformula "1"))
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "11") (inst "sk=f_0"))
                     (rule "allRight" (formula "11") (inst "sk=o_0"))
                     (rule "orRight" (formula "11"))
                     (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                     (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "closeTrue" (formula "13"))
                  )
               )
            )
            (branch "Null Reference (_t = null)"
               (rule "false_right" (formula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (_t != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
               (rule "false_right" (formula "11"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0"))
               (rule "leq_literals" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_5 false"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_t = null)"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_t = null)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
   (rule "blockEmpty" (formula "10") (term "1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_1"))
   (rule "assignment_read_length" (formula "10"))
   (branch "Normal Execution (_t != null)"
      (builtin "One Step Simplification" (formula "10"))
      (rule "less_than_comparison_simple" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "emptyModality" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "impRight" (formula "10"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "9"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "8"))
      (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
      (rule "add_literals" (formula "8") (term "1,0"))
      (rule "times_zero_1" (formula "8") (term "0"))
      (rule "leq_literals" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
      (rule "leq_literals" (formula "6") (term "0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "methodCallReturn" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "tryEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "add_literals" (formula "9") (term "1,1,0,0"))
      (rule "qeq_literals" (formula "9") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "allRight" (formula "9") (inst "sk=i_1"))
      (rule "orRight" (formula "9"))
      (rule "orRight" (formula "9"))
      (rule "notRight" (formula "11"))
      (rule "inEqSimp_geqRight" (formula "11"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "9"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
      (rule "simplifySelectOfAnon" (formula "3"))
      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "12")) (ifInst ""  (formula "6")))
      (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "allLeft" (formula "10") (inst "t=i_1"))
      (rule "replaceKnownSelect_taclet02_0" (formula "10") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet02_1" (formula "10") (term "0,0,1"))
      (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq0" (formula "10") (term "1") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "10") (term "0,0,1"))
      (rule "leq_literals" (formula "10") (term "0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Null Reference (_t = null)"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
